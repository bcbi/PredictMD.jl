##### Beginning of file

import Documenter
import Literate

function _preprocess_example_shared(
        content::AbstractString;
        )::String
    pattern = r"error\(string\(\"This file is not meant to be run\. Use the `PredictMD\.generate_examples\(\)` function to generate examples that you can run\.\"\)\)\n{0,5}"
    replacement = ""
    content = replace(content, pattern => replacement)

    pattern = "%PREDICTMD_MINIMUM_REQUIRED_JULIA_VERSION%"
    replacement = string("v0.7.0")
    content = replace(content, pattern => replacement)

    pattern = "%PREDICTMD_GENERATED_BY%\n"
    replacement = string(
        "## This file was generated by PredictMD version ",
        version(),
        "\n",
        "## For help, please visit https://www.predictmd.net",
        "\n",
        )
    content = replace(content, pattern => replacement)

    pattern = "%PREDICTMD_CURRENT_VERSION%"
    replacement = string(version())
    content = replace(content, pattern => replacement)

    pattern = "%PREDICTMD_NEXT_MINOR_VERSION%"
    replacement = string(
        next_minor_version(version(); add_trailing_minus = true)
        )
    content = replace(content, pattern => replacement)
    return content
end

function _preprocess_example_do_not_include_test_statements(
        content::AbstractString;
        )::String
    content = _preprocess_example_shared(content)
    pattern = r"# BEGIN TEST STATEMENTS[\S\s]*?# END TEST STATEMENTS\n{0,5}"
    replacement = ""
    content = replace(content, pattern => replacement)
    return content
end

function _preprocess_example_include_test_statements(
        content::AbstractString;
        )::String
    content = _preprocess_example_shared(content)

    pattern = r"# BEGIN TEST STATEMENTS\n{0,2}"
    replacement = ""
    content = replace(content, pattern => replacement)

    pattern = r"# END TEST STATEMENTS\n{0,2}"
    replacement = ""
    content = replace(content, pattern => replacement)
    return content
end

function _fix_example_blocks(filename::AbstractString)::Nothing
    if filename_extension(filename) == ".md"
        content = read(filename, String)
        rm(filename; force = true, recursive = true,)
        pattern = r"```@example \w*\n"
        replacement = "```julia\n"
        content = replace(content, pattern => replacement)
        write(filename, content)
    end
    return nothing
end

function generate_examples(
        output_directory::AbstractString;
        execute_notebooks = false,
        markdown = false,
        notebooks = false,
        scripts = false,
        include_test_statements::Bool = false,
        )::String
    if Sys.iswindows()
        execute_notebooks = false
    end
    ENV["PREDICTMD_IS_MAKE_EXAMPLES"] = "true"
    if !markdown && !notebooks && !scripts
        error(
            string(
                "At least one of markdown, notebooks, scripts must be true.",
                )
            )
    end
    if ispath(output_directory)
        error(
            string(
                "The output directory already exists. ",
                "Delete the output directory and then ",
                "re-run generate_examples."
                )
            )
    end

    if include_test_statements
        preprocess_example = _preprocess_example_include_test_statements
    else
        preprocess_example = _preprocess_example_do_not_include_test_statements
    end

    @info("Starting to generate examples...")

    temp_examples_dir = joinpath(
        mktempdir(),
        "generate_examples",
        "PredictMDTemp",
        "docs",
        "src",
        "examples",
        )
    try
        mkpath(temp_examples_dir)
    catch
    end

    examples_input_parent_directory =
        PredictMD.package_directory("templates", "examples")

    cpu_examples_input_parent_directory = joinpath(
        examples_input_parent_directory,
        "cpu",
        )
    cpu_examples_output_parent_directory = joinpath(
        temp_examples_dir,
        "cpu",
        )
    try
        mkpath(cpu_examples_output_parent_directory)
    catch
    end

    boston_housing_input_directory = joinpath(
        cpu_examples_input_parent_directory,
        "boston_housing",
        )
    boston_housing_output_directory = joinpath(
        cpu_examples_output_parent_directory,
        "boston_housing",
        )
    try
        mkpath(boston_housing_output_directory)
    catch
    end
    boston_housing_input_file_list =
        readdir(boston_housing_input_directory)
    boston_housing_input_file_list =
        boston_housing_input_file_list[
            [endswith(x, ".jl") for x in
                boston_housing_input_file_list]
            ]
    sort!(boston_housing_input_file_list)
    for input_file in boston_housing_input_file_list
        input_file_full_path = joinpath(
            boston_housing_input_directory,
            input_file,
            )
        if markdown
            Literate.markdown(
                input_file_full_path,
                boston_housing_output_directory;
                codefence = "```@example boston_housing" => "```",
                documenter = true,
                preprocess = preprocess_example,
                )
        end
        if notebooks
            Literate.notebook(
                input_file_full_path,
                boston_housing_output_directory;
                documenter = true,
                execute = execute_notebooks,
                preprocess = preprocess_example,
                )
        end
        if scripts
            Literate.script(
                input_file_full_path,
                boston_housing_output_directory;
                documenter = true,
                keep_comments = true,
                preprocess = preprocess_example,
                )
        end
    end

    breast_cancer_biopsy_input_directory = joinpath(
        cpu_examples_input_parent_directory,
        "breast_cancer_biopsy",
        )
    breast_cancer_biopsy_output_directory = joinpath(
        cpu_examples_output_parent_directory,
        "breast_cancer_biopsy",
        )
    try
        mkpath(breast_cancer_biopsy_output_directory)
    catch
    end
    breast_cancer_biopsy_input_file_list =
        readdir(breast_cancer_biopsy_input_directory)
    breast_cancer_biopsy_input_file_list =
        breast_cancer_biopsy_input_file_list[
            [endswith(x, ".jl") for x in
                breast_cancer_biopsy_input_file_list]
            ]
    sort!(breast_cancer_biopsy_input_file_list)
    for input_file in breast_cancer_biopsy_input_file_list
        input_file_full_path = joinpath(
            breast_cancer_biopsy_input_directory,
            input_file,
            )
        if markdown
            Literate.markdown(
                input_file_full_path,
                breast_cancer_biopsy_output_directory;
                codefence = "```@example breast_cancer_biopsy" => "```",
                documenter = true,
                preprocess = preprocess_example,
                )
        end
        if notebooks
            Literate.notebook(
                input_file_full_path,
                breast_cancer_biopsy_output_directory;
                documenter = true,
                execute = execute_notebooks,
                preprocess = preprocess_example,
                )
        end
        if scripts
            Literate.script(
                input_file_full_path,
                breast_cancer_biopsy_output_directory;
                documenter = true,
                keep_comments = true,
                preprocess = preprocess_example,
                )
        end
    end

    for (root, dirs, files) in walkdir(temp_examples_dir)
        for f in files
            filename = joinpath(root, f)
            _fix_example_blocks(filename)
        end
    end

    try
        mkpath(dirname(output_directory))
    catch
    end

    cp(
        temp_examples_dir,
        output_directory;
        force = true,
        )

    @info(
        string(
            "Finished generating examples. ",
            "Files were written to: \"",
            output_directory,
            "\".",
            )
        )
    ENV["PREDICTMD_IS_MAKE_EXAMPLES"] = "false"
    return output_directory
end

##### End of file
