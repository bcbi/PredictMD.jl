##### Beginning of file

branches:
    except:
        - gh-pages

build:
    verbosity: detailed

environment:
    global:
        DOCUMENTER_DEBUG: "true"
        JULIA_DEBUG: "all"
        PREDICTMD_OPEN_PLOTS_DURING_TESTS: "false"
    matrix:
        - GROUP: "appveyor-1"
          JULIA_URL: "https://julialang-s3.julialang.org/bin/winnt/x64/1.0/julia-1.0-latest-win64.exe"
        - GROUP: "appveyor-1"
          JULIA_URL: "https://julialang-s3.julialang.org/bin/winnt/x64/1.1/julia-1.1-latest-win64.exe"
        - GROUP: "appveyor-1"
          JULIA_URL: "https://julialangnightlies-s3.julialang.org/bin/winnt/x64/julia-latest-win64.exe"

image: Visual Studio 2015

matrix:
    allow_failures:
        - JULIA_URL: "https://julialang-s3.julialang.org/bin/winnt/x64/1.1/julia-1.1-latest-win64.exe"
        - JULIA_URL: "https://julialangnightlies-s3.julialang.org/bin/winnt/x64/julia-latest-win64.exe"
    fast_finish: true # immediately finish build once one of the jobs fails

notifications:
    - provider: Email
      on_build_success: true
      on_build_failure: true
      on_build_status_changed: true

pull_requests:
    do_not_increment_build_number: true

skip_branch_with_pr: false

skip_non_tags: false

skip_tags: false

version: '{build}-{branch}'

############################################################################

install:
    - ps: "[System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12"
    # If there's a newer build queued for the same PR, cancel this build
    - ps: if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `
          https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=50).builds | `
          Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `
          throw "There are newer queued builds for this pull request, failing early." }
    # Configure Visual Studio build environment
    - call "C:\Program Files\Microsoft SDKs\Windows\v7.1\Bin\SetEnv.cmd" /x64
    - call "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" x86_amd64
    # Download the appropriate Julia Windows binary
    - ps: (new-object net.webclient).DownloadFile(
          $env:JULIA_URL,
          "C:\projects\julia-binary.exe")
    # Run Julia installer silently, output to C:\projects\julia
    - C:\projects\julia-binary.exe /S /D=C:\projects\julia

build_script:
    # Need to convert from shallow to complete for Pkg.clone to work
    - IF EXIST .git\shallow (git fetch --unshallow)
    - C:\projects\julia\bin\julia --check-bounds=yes --color=yes -e
        "import Pkg; Pkg.clone(pwd(), \"PredictMD\")"
    - C:\projects\julia\bin\julia --check-bounds=yes --color=yes -e
        "import Pkg; Pkg.build(\"PredictMD\")"

test_script:
    - C:\projects\julia\bin\julia --check-bounds=yes --color=yes -e
        "import PredictMD"
    - C:\projects\julia\bin\julia --check-bounds=yes --color=yes -e
        "import Pkg; Pkg.test(\"PredictMD\"; coverage=true)"

on_success:
    - C:\projects\julia\bin\julia --check-bounds=yes --color=yes -e
        "import Pkg; Pkg.add(\"Coverage\")"
    - C:\projects\julia\bin\julia --check-bounds=yes --color=yes -e
        "import Pkg; cd(Pkg.dir(\"PredictMD\"));using Coverage;Codecov.submit(Codecov.process_folder());"


##### End of file
