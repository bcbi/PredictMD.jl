var documenterSearchIndex = {"docs":
[{"location":"examples/cpu_examples/boston_housing/src/02_linear_regression/#","page":"2.  Linear regressions","title":"2.  Linear regressions","text":"EditURL = \"https://github.com/bcbi/PredictMD.jl/blob/master/templates/examples/cpu_examples/boston_housing/src/02_linear_regression.jl\"","category":"page"},{"location":"examples/cpu_examples/boston_housing/src/02_linear_regression/#","page":"2.  Linear regressions","title":"2.  Linear regressions","text":"# This file was generated by PredictMD version 0.34.21\n# For help, please visit https://predictmd.net\n\nusing PredictMDExtra\nPredictMDExtra.import_all()\n\nusing PredictMD\nPredictMD.import_all()\n\n\n\n### Begin project-specific settings\n\nDIRECTORY_CONTAINING_THIS_FILE = @__DIR__\nPROJECT_DIRECTORY = dirname(\n    joinpath(splitpath(DIRECTORY_CONTAINING_THIS_FILE)...)\n    )\nPROJECT_OUTPUT_DIRECTORY = joinpath(\n    PROJECT_DIRECTORY,\n    \"output\",\n    )\nmkpath(PROJECT_OUTPUT_DIRECTORY)\nmkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, \"data\"))\nmkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, \"models\"))\nmkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, \"plots\"))\n\n\n\n### End project-specific settings\n\n### Begin linear regression code\n\nRandom.seed!(999)\n\ntrainingandtuning_features_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"trainingandtuning_features_df.csv\",\n    )\ntrainingandtuning_labels_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"trainingandtuning_labels_df.csv\",\n    )\ntesting_features_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"testing_features_df.csv\",\n    )\ntesting_labels_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"testing_labels_df.csv\",\n    )\ntraining_features_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"training_features_df.csv\",\n    )\ntraining_labels_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"training_labels_df.csv\",\n    )\ntuning_features_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"tuning_features_df.csv\",\n    )\ntuning_labels_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"tuning_labels_df.csv\",\n    )\ntrainingandtuning_features_df = DataFrames.DataFrame(\n    FileIO.load(\n        trainingandtuning_features_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntrainingandtuning_labels_df = DataFrames.DataFrame(\n    FileIO.load(\n        trainingandtuning_labels_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntesting_features_df = DataFrames.DataFrame(\n    FileIO.load(\n        testing_features_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntesting_labels_df = DataFrames.DataFrame(\n    FileIO.load(\n        testing_labels_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntraining_features_df = DataFrames.DataFrame(\n    FileIO.load(\n        training_features_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntraining_labels_df = DataFrames.DataFrame(\n    FileIO.load(\n        training_labels_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntuning_features_df = DataFrames.DataFrame(\n    FileIO.load(\n        tuning_features_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntuning_labels_df = DataFrames.DataFrame(\n    FileIO.load(\n        tuning_labels_df_filename;\n        type_detect_rows = 100,\n        )\n    )\n\ncategorical_feature_names_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"categorical_feature_names.jld2\",\n    )\ncontinuous_feature_names_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"continuous_feature_names.jld2\",\n    )\ncategorical_feature_names = FileIO.load(\n    categorical_feature_names_filename,\n    \"categorical_feature_names\",\n    )\ncontinuous_feature_names = FileIO.load(\n    continuous_feature_names_filename,\n    \"continuous_feature_names\",\n    )\nfeature_names = vcat(categorical_feature_names, continuous_feature_names)\n\nsingle_label_name = :MedV\ncontinuous_label_names = Symbol[single_label_name]\ncategorical_label_names = Symbol[]\nlabel_names = vcat(categorical_label_names, continuous_label_names)\n\n\n\nshow(\n    PredictMD.linearly_dependent_columns(\n        training_features_df,\n        feature_names,\n        )\n    )\n\n\n\nlinear_regression = PredictMD.single_labeldataframelinearregression(\n    feature_names,\n    single_label_name;\n    package = :GLM,\n    intercept = true,\n    interactions = 1,\n    name = \"Linear regression\",\n    )\n\n\n\n\n\nPredictMD.fit!(linear_regression,training_features_df,training_labels_df)\n\nPredictMD.get_underlying(linear_regression) # TODO: fix this error\n\nlinear_regression_plot_training =\n    PredictMD.plotsinglelabelregressiontrueversuspredicted(\n        linear_regression,\n        training_features_df,\n        training_labels_df,\n        single_label_name,\n        );\n\n\n\ndisplay(linear_regression_plot_training)\nPredictMD.save_plot(\n    joinpath(\n        PROJECT_OUTPUT_DIRECTORY,\n        \"plots\",\n        \"linear_regression_plot_training.pdf\",\n        ),\n    linear_regression_plot_training,\n    )\n\nlinear_regression_plot_testing =\n    PredictMD.plotsinglelabelregressiontrueversuspredicted(\n        linear_regression,\n        testing_features_df,\n        testing_labels_df,\n        single_label_name\n        );\n\n\n\ndisplay(linear_regression_plot_testing)\nPredictMD.save_plot(\n    joinpath(\n        PROJECT_OUTPUT_DIRECTORY,\n        \"plots\",\n        \"linear_regression_plot_testing.pdf\",\n        ),\n    linear_regression_plot_testing,\n    )\n\nshow(\n    PredictMD.singlelabelregressionmetrics(\n        linear_regression,\n        training_features_df,\n        training_labels_df,\n        single_label_name,\n        );\n    allrows = true,\n    allcols = true,\n    splitcols = false,\n    )\n\nshow(\n    PredictMD.singlelabelregressionmetrics(\n        linear_regression,\n        testing_features_df,\n        testing_labels_df,\n        single_label_name,\n        );\n    allrows = true,\n    allcols = true,\n    splitcols = false,\n    )\n\nlinear_regression_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"models\",\n    \"linear_regression.jld2\",\n    )\n\nPredictMD.save_model(linear_regression_filename, linear_regression)\n\n\n\n\n\n### End linear regression code\n\n\n\n# This file was generated by PredictMD version 0.34.21\n# For help, please visit https://predictmd.net","category":"page"},{"location":"examples/cpu_examples/boston_housing/src/02_linear_regression/#","page":"2.  Linear regressions","title":"2.  Linear regressions","text":"","category":"page"},{"location":"examples/cpu_examples/boston_housing/src/02_linear_regression/#","page":"2.  Linear regressions","title":"2.  Linear regressions","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/cpu_examples/breast_cancer_biopsy/src/07_knet_mlp_classifier/#","page":"7.  Knet neural network classifier","title":"7.  Knet neural network classifier","text":"EditURL = \"https://github.com/bcbi/PredictMD.jl/blob/master/templates/examples/cpu_examples/breast_cancer_biopsy/src/07_knet_mlp_classifier.jl\"","category":"page"},{"location":"examples/cpu_examples/breast_cancer_biopsy/src/07_knet_mlp_classifier/#","page":"7.  Knet neural network classifier","title":"7.  Knet neural network classifier","text":"# This file was generated by PredictMD version 0.34.21\n# For help, please visit https://predictmd.net\n\nusing PredictMDExtra\nPredictMDExtra.import_all()\n\nusing PredictMD\nPredictMD.import_all()\n\n\n\n### Begin project-specific settings\n\nDIRECTORY_CONTAINING_THIS_FILE = @__DIR__\nPROJECT_DIRECTORY = dirname(\n    joinpath(splitpath(DIRECTORY_CONTAINING_THIS_FILE)...)\n    )\nPROJECT_OUTPUT_DIRECTORY = joinpath(\n    PROJECT_DIRECTORY,\n    \"output\",\n    )\nmkpath(PROJECT_OUTPUT_DIRECTORY)\nmkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, \"data\"))\nmkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, \"models\"))\nmkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, \"plots\"))\n\n\n\n### End project-specific settings\n\n### Begin Knet neural network classifier code\n\nRandom.seed!(999)\n\ntrainingandtuning_features_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"trainingandtuning_features_df.csv\",\n    )\ntrainingandtuning_labels_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"trainingandtuning_labels_df.csv\",\n    )\ntesting_features_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"testing_features_df.csv\",\n    )\ntesting_labels_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"testing_labels_df.csv\",\n    )\ntraining_features_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"training_features_df.csv\",\n    )\ntraining_labels_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"training_labels_df.csv\",\n    )\ntuning_features_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"tuning_features_df.csv\",\n    )\ntuning_labels_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"tuning_labels_df.csv\",\n    )\ntrainingandtuning_features_df = DataFrames.DataFrame(\n    FileIO.load(\n        trainingandtuning_features_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntrainingandtuning_labels_df = DataFrames.DataFrame(\n    FileIO.load(\n        trainingandtuning_labels_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntesting_features_df = DataFrames.DataFrame(\n    FileIO.load(\n        testing_features_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntesting_labels_df = DataFrames.DataFrame(\n    FileIO.load(\n        testing_labels_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntraining_features_df = DataFrames.DataFrame(\n    FileIO.load(\n        training_features_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntraining_labels_df = DataFrames.DataFrame(\n    FileIO.load(\n        training_labels_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntuning_features_df = DataFrames.DataFrame(\n    FileIO.load(\n        tuning_features_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntuning_labels_df = DataFrames.DataFrame(\n    FileIO.load(\n        tuning_labels_df_filename;\n        type_detect_rows = 100,\n        )\n    )\n\nsmoted_training_features_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"smoted_training_features_df.csv\",\n    )\nsmoted_training_labels_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"smoted_training_labels_df.csv\",\n    )\nsmoted_training_features_df = DataFrames.DataFrame(\n    FileIO.load(\n        smoted_training_features_df_filename;\n        type_detect_rows = 100,\n        )\n    )\nsmoted_training_labels_df = DataFrames.DataFrame(\n    FileIO.load(\n        smoted_training_labels_df_filename;\n        type_detect_rows = 100,\n        )\n    )\n\ncategorical_feature_names_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"categorical_feature_names.jld2\",\n    )\ncontinuous_feature_names_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"continuous_feature_names.jld2\",\n    )\ncategorical_feature_names = FileIO.load(\n    categorical_feature_names_filename,\n    \"categorical_feature_names\",\n    )\ncontinuous_feature_names = FileIO.load(\n    continuous_feature_names_filename,\n    \"continuous_feature_names\",\n    )\nfeature_names = vcat(categorical_feature_names, continuous_feature_names)\n\nsingle_label_name = :Class\nnegative_class = \"benign\"\npositive_class = \"malignant\"\nsingle_label_levels = [negative_class, positive_class]\n\ncategorical_label_names = Symbol[single_label_name]\ncontinuous_label_names = Symbol[]\nlabel_names = vcat(categorical_label_names, continuous_label_names)\n\nknet_mlp_predict_function_source = \"\"\"\nfunction knetmlp_predict(\n        w,\n        x0::AbstractArray;\n        probabilities::Bool = true,\n        )\n    x1 = Knet.relu.( w[1]*x0 .+ w[2] )\n    x2 = Knet.relu.( w[3]*x1 .+ w[4] )\n    x3 = w[5]*x2 .+ w[6]\n    unnormalizedlogprobs = x3\n    if probabilities\n        normalizedlogprobs = Knet.logp(unnormalizedlogprobs; dims = 1)\n        normalizedprobs = exp.(normalizedlogprobs)\n        return normalizedprobs\n    else\n        return unnormalizedlogprobs\n    end\nend\n\"\"\"\n\nknet_mlp_loss_function_source = \"\"\"\nfunction knetmlp_loss(\n        predict::Function,\n        modelweights,\n        x::AbstractArray,\n        ytrue::AbstractArray;\n        L1::Real = Float64(0),\n        L2::Real = Float64(0),\n        )\n    loss = Knet.nll(\n        predict(\n            modelweights,\n            x;\n            probabilities = false,\n            ),\n        ytrue;\n        dims = 1,\n        )\n    if L1 != 0\n        loss += L1 * sum(sum(abs, w_i) for w_i in modelweights[1:2:end])\n    end\n    if L2 != 0\n        loss += L2 * sum(sum(abs2, w_i) for w_i in modelweights[1:2:end])\n    end\n    return loss\nend\n\"\"\"\n\nfeature_contrasts = PredictMD.generate_feature_contrasts(\n    smoted_training_features_df,\n    feature_names,\n    )\n\nknetmlp_modelweights = Any[\n    Float64.(\n        0.1f0*randn(Float64,64,feature_contrasts.num_array_columns_without_intercept)\n        ),\n    Float64.(\n        fill(Float64(0),64,1)\n        ),\n    Float64.(\n        0.1f0*randn(Float64,32,64)\n        ),\n    Float64.(\n        fill(Float64(0),32,1)\n        ),\n    Float64.(\n        0.1f0*randn(Float64,2,32)\n        ),\n    Float64.(\n        fill(Float64(0),2,1)\n        ),\n    ]\n\nknetmlp_losshyperparameters = Dict()\nknetmlp_losshyperparameters[:L1] = Float64(0.0)\nknetmlp_losshyperparameters[:L2] = Float64(0.0)\n\nknetmlp_optimizationalgorithm = :Momentum\nknetmlp_optimizerhyperparameters = Dict()\nknetmlp_minibatchsize = 48\n\nknet_mlp_classifier =\n    PredictMD.single_labelmulticlassdataframeknetclassifier(\n        feature_names,\n        single_label_name,\n        single_label_levels;\n        package = :Knet,\n        name = \"Knet MLP\",\n        predict_function_source = knet_mlp_predict_function_source,\n        loss_function_source = knet_mlp_loss_function_source,\n        losshyperparameters = knetmlp_losshyperparameters,\n        optimizationalgorithm = knetmlp_optimizationalgorithm,\n        optimizerhyperparameters = knetmlp_optimizerhyperparameters,\n        minibatchsize = knetmlp_minibatchsize,\n        modelweights = knetmlp_modelweights,\n        printlosseverynepochs = 1,\n        maxepochs = 50,\n        feature_contrasts = feature_contrasts,\n        )\n\nPredictMD.parse_functions!(knet_mlp_classifier)\n\nPredictMD.fit!(\n    knet_mlp_classifier,\n    smoted_training_features_df,\n    smoted_training_labels_df,\n    tuning_features_df,\n    tuning_labels_df,\n    )\n\nPredictMD.set_max_epochs!(knet_mlp_classifier, 100)\n\nPredictMD.fit!(\n    knet_mlp_classifier,\n    smoted_training_features_df,\n    smoted_training_labels_df,\n    tuning_features_df,\n    tuning_labels_df,\n    )\n\nknet_learningcurve_lossvsepoch = PredictMD.plotlearningcurve(\n    knet_mlp_classifier,\n    :loss_vs_epoch;\n    );\n\n\n\ndisplay(knet_learningcurve_lossvsepoch)\nPredictMD.save_plot(\n    joinpath(\n        PROJECT_OUTPUT_DIRECTORY,\n        \"plots\",\n        \"knet_learningcurve_lossvsepoch.pdf\",\n        ),\n    knet_learningcurve_lossvsepoch,\n    )\n\nknet_learningcurve_lossvsepoch_skip10epochs = PredictMD.plotlearningcurve(\n    knet_mlp_classifier,\n    :loss_vs_epoch;\n    startat = 10,\n    endat = :end,\n    );\n\n\n\ndisplay(knet_learningcurve_lossvsepoch_skip10epochs)\nPredictMD.save_plot(\n    joinpath(\n        PROJECT_OUTPUT_DIRECTORY,\n        \"plots\",\n        \"knet_learningcurve_lossvsepoch_skip10epochs.pdf\",\n        ),\n    knet_learningcurve_lossvsepoch_skip10epochs,\n    )\n\nknet_learningcurve_lossvsiteration = PredictMD.plotlearningcurve(\n    knet_mlp_classifier,\n    :loss_vs_iteration;\n    window = 50,\n    sampleevery = 10,\n    );\n\n\n\ndisplay(knet_learningcurve_lossvsiteration)\nPredictMD.save_plot(\n    joinpath(\n        PROJECT_OUTPUT_DIRECTORY,\n        \"plots\",\n        \"knet_learningcurve_lossvsiteration.pdf\",\n        ),\n    knet_learningcurve_lossvsiteration,\n    )\n\nknet_learningcurve_lossvsiteration_skip100iterations =\n    PredictMD.plotlearningcurve(\n        knet_mlp_classifier,\n        :loss_vs_iteration;\n        window = 50,\n        sampleevery = 10,\n        startat = 100,\n        endat = :end,\n        );\n\n\n\ndisplay(knet_learningcurve_lossvsiteration_skip100iterations)\nPredictMD.save_plot(\n    joinpath(\n        PROJECT_OUTPUT_DIRECTORY,\n        \"plots\",\n        \"knet_learningcurve_lossvsiteration_skip100iterations.pdf\",\n        ),\n    knet_learningcurve_lossvsiteration_skip100iterations,\n    )\n\nknet_mlp_classifier_hist_training =\n    PredictMD.plotsinglelabelbinaryclassifierhistogram(\n        knet_mlp_classifier,\n        smoted_training_features_df,\n        smoted_training_labels_df,\n        single_label_name,\n        single_label_levels,\n        );\n\n\n\ndisplay(knet_mlp_classifier_hist_training)\nPredictMD.save_plot(\n    joinpath(\n        PROJECT_OUTPUT_DIRECTORY,\n        \"plots\",\n        \"knet_mlp_classifier_hist_training.pdf\",\n        ),\n    knet_mlp_classifier_hist_training,\n    )\n\nknet_mlp_classifier_hist_testing =\n        PredictMD.plotsinglelabelbinaryclassifierhistogram(\n        knet_mlp_classifier,\n        testing_features_df,\n        testing_labels_df,\n        single_label_name,\n        single_label_levels,\n        );\n\n\n\ndisplay(knet_mlp_classifier_hist_testing)\nPredictMD.save_plot(\n    joinpath(\n        PROJECT_OUTPUT_DIRECTORY,\n        \"plots\",\n        \"knet_mlp_classifier_hist_testing.pdf\",\n        ),\n    knet_mlp_classifier_hist_testing,\n    )\n\nshow(\n    PredictMD.singlelabelbinaryclassificationmetrics(\n        knet_mlp_classifier,\n        smoted_training_features_df,\n        smoted_training_labels_df,\n        single_label_name,\n        positive_class;\n        sensitivity = 0.95,\n        );\n    allrows = true,\n    allcols = true,\n    splitcols = false,\n    )\n\nshow(\n    PredictMD.singlelabelbinaryclassificationmetrics(\n        knet_mlp_classifier,\n        testing_features_df,\n        testing_labels_df,\n        single_label_name,\n        positive_class;\n        sensitivity = 0.95,\n        );\n    allrows = true,\n    allcols = true,\n    splitcols = false,\n    )\n\nknet_mlp_classifier_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"models\",\n    \"knet_mlp_classifier.jld2\",\n    )\n\nPredictMD.save_model(knet_mlp_classifier_filename, knet_mlp_classifier)\n\n\n\n### End Knet neural network classifier code\n\n\n\n# This file was generated by PredictMD version 0.34.21\n# For help, please visit https://predictmd.net","category":"page"},{"location":"examples/cpu_examples/breast_cancer_biopsy/src/07_knet_mlp_classifier/#","page":"7.  Knet neural network classifier","title":"7.  Knet neural network classifier","text":"","category":"page"},{"location":"examples/cpu_examples/breast_cancer_biopsy/src/07_knet_mlp_classifier/#","page":"7.  Knet neural network classifier","title":"7.  Knet neural network classifier","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/cpu_examples/breast_cancer_biopsy/src/06_nu_svc_svm_classifier/#","page":"6.  nu-SVC support vector machine classifier","title":"6.  nu-SVC support vector machine classifier","text":"EditURL = \"https://github.com/bcbi/PredictMD.jl/blob/master/templates/examples/cpu_examples/breast_cancer_biopsy/src/06_nu_svc_svm_classifier.jl\"","category":"page"},{"location":"examples/cpu_examples/breast_cancer_biopsy/src/06_nu_svc_svm_classifier/#","page":"6.  nu-SVC support vector machine classifier","title":"6.  nu-SVC support vector machine classifier","text":"# This file was generated by PredictMD version 0.34.21\n# For help, please visit https://predictmd.net\n\nusing PredictMDExtra\nPredictMDExtra.import_all()\n\nusing PredictMD\nPredictMD.import_all()\n\n\n\n### Begin project-specific settings\n\nDIRECTORY_CONTAINING_THIS_FILE = @__DIR__\nPROJECT_DIRECTORY = dirname(\n    joinpath(splitpath(DIRECTORY_CONTAINING_THIS_FILE)...)\n    )\nPROJECT_OUTPUT_DIRECTORY = joinpath(\n    PROJECT_DIRECTORY,\n    \"output\",\n    )\nmkpath(PROJECT_OUTPUT_DIRECTORY)\nmkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, \"data\"))\nmkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, \"models\"))\nmkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, \"plots\"))\n\n\n\n### End project-specific settings\n\n### Begin nu-SVC code\n\nKernel = LIBSVM.Kernel\n\nRandom.seed!(999)\n\ntrainingandtuning_features_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"trainingandtuning_features_df.csv\",\n    )\ntrainingandtuning_labels_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"trainingandtuning_labels_df.csv\",\n    )\ntesting_features_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"testing_features_df.csv\",\n    )\ntesting_labels_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"testing_labels_df.csv\",\n    )\ntraining_features_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"training_features_df.csv\",\n    )\ntraining_labels_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"training_labels_df.csv\",\n    )\ntuning_features_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"tuning_features_df.csv\",\n    )\ntuning_labels_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"tuning_labels_df.csv\",\n    )\ntrainingandtuning_features_df = DataFrames.DataFrame(\n    FileIO.load(\n        trainingandtuning_features_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntrainingandtuning_labels_df = DataFrames.DataFrame(\n    FileIO.load(\n        trainingandtuning_labels_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntesting_features_df = DataFrames.DataFrame(\n    FileIO.load(\n        testing_features_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntesting_labels_df = DataFrames.DataFrame(\n    FileIO.load(\n        testing_labels_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntraining_features_df = DataFrames.DataFrame(\n    FileIO.load(\n        training_features_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntraining_labels_df = DataFrames.DataFrame(\n    FileIO.load(\n        training_labels_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntuning_features_df = DataFrames.DataFrame(\n    FileIO.load(\n        tuning_features_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntuning_labels_df = DataFrames.DataFrame(\n    FileIO.load(\n        tuning_labels_df_filename;\n        type_detect_rows = 100,\n        )\n    )\n\nsmoted_training_features_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"smoted_training_features_df.csv\",\n    )\nsmoted_training_labels_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"smoted_training_labels_df.csv\",\n    )\nsmoted_training_features_df = DataFrames.DataFrame(\n    FileIO.load(\n        smoted_training_features_df_filename;\n        type_detect_rows = 100,\n        )\n    )\nsmoted_training_labels_df = DataFrames.DataFrame(\n    FileIO.load(\n        smoted_training_labels_df_filename;\n        type_detect_rows = 100,\n        )\n    )\n\ncategorical_feature_names_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"categorical_feature_names.jld2\",\n    )\ncontinuous_feature_names_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"continuous_feature_names.jld2\",\n    )\ncategorical_feature_names = FileIO.load(\n    categorical_feature_names_filename,\n    \"categorical_feature_names\",\n    )\ncontinuous_feature_names = FileIO.load(\n    continuous_feature_names_filename,\n    \"continuous_feature_names\",\n    )\nfeature_names = vcat(categorical_feature_names, continuous_feature_names)\n\nsingle_label_name = :Class\nnegative_class = \"benign\"\npositive_class = \"malignant\"\nsingle_label_levels = [negative_class, positive_class]\n\ncategorical_label_names = Symbol[single_label_name]\ncontinuous_label_names = Symbol[]\nlabel_names = vcat(categorical_label_names, continuous_label_names)\n\nfeature_contrasts = PredictMD.generate_feature_contrasts(\n    smoted_training_features_df,\n    feature_names,\n    )\n\nnu_svc_svm_classifier =\n    PredictMD.single_labelmulticlassdataframesvmclassifier(\n        feature_names,\n        single_label_name,\n        single_label_levels;\n        package = :LIBSVM,\n        svmtype = LIBSVM.NuSVC,\n        name = \"SVM (nu-SVC)\",\n        verbose = false,\n        feature_contrasts = feature_contrasts,\n        )\n\nPredictMD.fit!(\n    nu_svc_svm_classifier,\n    smoted_training_features_df,\n    smoted_training_labels_df,\n    )\n\nnu_svc_svm_classifier_hist_training =\n    PredictMD.plotsinglelabelbinaryclassifierhistogram(\n        nu_svc_svm_classifier,\n        smoted_training_features_df,\n        smoted_training_labels_df,\n        single_label_name,\n        single_label_levels,\n        );\n\n\n\ndisplay(nu_svc_svm_classifier_hist_training)\nPredictMD.save_plot(\n    joinpath(\n        PROJECT_OUTPUT_DIRECTORY,\n        \"plots\",\n        \"nu_svc_svm_classifier_hist_training.pdf\",\n        ),\n    nu_svc_svm_classifier_hist_training,\n    )\n\nnu_svc_svm_classifier_hist_testing =\n    PredictMD.plotsinglelabelbinaryclassifierhistogram(\n        nu_svc_svm_classifier,\n        testing_features_df,\n        testing_labels_df,\n        single_label_name,\n        single_label_levels,\n        );\n\n\n\ndisplay(nu_svc_svm_classifier_hist_testing)\nPredictMD.save_plot(\n    joinpath(\n        PROJECT_OUTPUT_DIRECTORY,\n        \"plots\",\n        \"nu_svc_svm_classifier_hist_testing.pdf\",\n        ),\n    nu_svc_svm_classifier_hist_testing,\n    )\n\nshow(\n    PredictMD.singlelabelbinaryclassificationmetrics(\n        nu_svc_svm_classifier,\n        smoted_training_features_df,\n        smoted_training_labels_df,\n        single_label_name,\n        positive_class;\n        sensitivity = 0.95,\n        );\n    allrows = true,\n    allcols = true,\n    splitcols = false,\n    )\n\nshow(\n    PredictMD.singlelabelbinaryclassificationmetrics(\n        nu_svc_svm_classifier,\n        testing_features_df,\n        testing_labels_df,\n        single_label_name,\n        positive_class;\n        sensitivity = 0.95,\n        );\n    allrows = true,\n    allcols = true,\n    splitcols = false,\n    )\n\nnu_svc_svm_classifier_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"models\",\n    \"nu_svc_svm_classifier.jld2\",\n    )\n\nPredictMD.save_model(\n    nu_svc_svm_classifier_filename,\n    nu_svc_svm_classifier,\n    )\n\n\n\n### End nu-SVC code\n\n\n\n# This file was generated by PredictMD version 0.34.21\n# For help, please visit https://predictmd.net","category":"page"},{"location":"examples/cpu_examples/breast_cancer_biopsy/src/06_nu_svc_svm_classifier/#","page":"6.  nu-SVC support vector machine classifier","title":"6.  nu-SVC support vector machine classifier","text":"","category":"page"},{"location":"examples/cpu_examples/breast_cancer_biopsy/src/06_nu_svc_svm_classifier/#","page":"6.  nu-SVC support vector machine classifier","title":"6.  nu-SVC support vector machine classifier","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/cpu_examples/boston_housing/src/03_random_forest_regression/#","page":"3.  Random forest regression","title":"3.  Random forest regression","text":"EditURL = \"https://github.com/bcbi/PredictMD.jl/blob/master/templates/examples/cpu_examples/boston_housing/src/03_random_forest_regression.jl\"","category":"page"},{"location":"examples/cpu_examples/boston_housing/src/03_random_forest_regression/#","page":"3.  Random forest regression","title":"3.  Random forest regression","text":"# This file was generated by PredictMD version 0.34.21\n# For help, please visit https://predictmd.net\n\nusing PredictMDExtra\nPredictMDExtra.import_all()\n\nusing PredictMD\nPredictMD.import_all()\n\n\n\n### Begin project-specific settings\n\nDIRECTORY_CONTAINING_THIS_FILE = @__DIR__\nPROJECT_DIRECTORY = dirname(\n    joinpath(splitpath(DIRECTORY_CONTAINING_THIS_FILE)...)\n    )\nPROJECT_OUTPUT_DIRECTORY = joinpath(\n    PROJECT_DIRECTORY,\n    \"output\",\n    )\nmkpath(PROJECT_OUTPUT_DIRECTORY)\nmkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, \"data\"))\nmkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, \"models\"))\nmkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, \"plots\"))\n\n\n\n### End project-specific settings\n\n### Begin random forest regression code\n\nRandom.seed!(999)\n\ntrainingandtuning_features_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"trainingandtuning_features_df.csv\",\n    )\ntrainingandtuning_labels_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"trainingandtuning_labels_df.csv\",\n    )\ntesting_features_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"testing_features_df.csv\",\n    )\ntesting_labels_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"testing_labels_df.csv\",\n    )\ntraining_features_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"training_features_df.csv\",\n    )\ntraining_labels_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"training_labels_df.csv\",\n    )\ntuning_features_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"tuning_features_df.csv\",\n    )\ntuning_labels_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"tuning_labels_df.csv\",\n    )\ntrainingandtuning_features_df = DataFrames.DataFrame(\n    FileIO.load(\n        trainingandtuning_features_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntrainingandtuning_labels_df = DataFrames.DataFrame(\n    FileIO.load(\n        trainingandtuning_labels_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntesting_features_df = DataFrames.DataFrame(\n    FileIO.load(\n        testing_features_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntesting_labels_df = DataFrames.DataFrame(\n    FileIO.load(\n        testing_labels_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntraining_features_df = DataFrames.DataFrame(\n    FileIO.load(\n        training_features_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntraining_labels_df = DataFrames.DataFrame(\n    FileIO.load(\n        training_labels_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntuning_features_df = DataFrames.DataFrame(\n    FileIO.load(\n        tuning_features_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntuning_labels_df = DataFrames.DataFrame(\n    FileIO.load(\n        tuning_labels_df_filename;\n        type_detect_rows = 100,\n        )\n    )\n\ncategorical_feature_names_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"categorical_feature_names.jld2\",\n    )\ncontinuous_feature_names_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"continuous_feature_names.jld2\",\n    )\ncategorical_feature_names = FileIO.load(\n    categorical_feature_names_filename,\n    \"categorical_feature_names\",\n    )\ncontinuous_feature_names = FileIO.load(\n    continuous_feature_names_filename,\n    \"continuous_feature_names\",\n    )\nfeature_names = vcat(categorical_feature_names, continuous_feature_names)\n\nsingle_label_name = :MedV\n\ncontinuous_label_names = Symbol[single_label_name]\ncategorical_label_names = Symbol[]\nlabel_names = vcat(categorical_label_names, continuous_label_names)\n\nfeature_contrasts = PredictMD.generate_feature_contrasts(\n    training_features_df,\n    feature_names,\n    )\n\nrandom_forest_regression =\n    PredictMD.single_labeldataframerandomforestregression(\n        feature_names,\n        single_label_name;\n        nsubfeatures = 2,\n        ntrees = 20,\n        package = :DecisionTree,\n        name = \"Random forest\",\n        feature_contrasts = feature_contrasts,\n        )\n\nPredictMD.fit!(random_forest_regression,\n               training_features_df,\n               training_labels_df)\n\nrandom_forest_regression_plot_training =\n    PredictMD.plotsinglelabelregressiontrueversuspredicted(\n        random_forest_regression,\n        training_features_df,\n        training_labels_df,\n        single_label_name,\n        );\n\n\n\ndisplay(random_forest_regression_plot_training)\nPredictMD.save_plot(\n    joinpath(\n        PROJECT_OUTPUT_DIRECTORY,\n        \"plots\",\n        \"random_forest_regression_plot_training.pdf\",\n        ),\n    random_forest_regression_plot_training,\n    )\n\nrandom_forest_regression_plot_testing =\n    PredictMD.plotsinglelabelregressiontrueversuspredicted(\n        random_forest_regression,\n        testing_features_df,\n        testing_labels_df,\n        single_label_name,\n        );\n\n\n\ndisplay(random_forest_regression_plot_testing)\nPredictMD.save_plot(\n    joinpath(\n        PROJECT_OUTPUT_DIRECTORY,\n        \"plots\",\n        \"random_forest_regression_plot_testing.pdf\",\n        ),\n    random_forest_regression_plot_testing,\n    )\n\nshow(\n    PredictMD.singlelabelregressionmetrics(\n        random_forest_regression,\n        training_features_df,\n        training_labels_df,\n        single_label_name,\n        );\n    allrows = true,\n    allcols = true,\n    splitcols = false,\n    )\n\nshow(\n    PredictMD.singlelabelregressionmetrics(\n        random_forest_regression,\n        testing_features_df,\n        testing_labels_df,\n        single_label_name,\n        );\n    allrows = true,\n    allcols = true,\n    splitcols = false,\n    )\n\nrandom_forest_regression_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"models\",\n    \"random_forest_regression.jld2\",\n    )\n\nPredictMD.save_model(\n    random_forest_regression_filename,\n    random_forest_regression\n    )\n\n\n\n### End random forest regression code\n\n\n\n# This file was generated by PredictMD version 0.34.21\n# For help, please visit https://predictmd.net","category":"page"},{"location":"examples/cpu_examples/boston_housing/src/03_random_forest_regression/#","page":"3.  Random forest regression","title":"3.  Random forest regression","text":"","category":"page"},{"location":"examples/cpu_examples/boston_housing/src/03_random_forest_regression/#","page":"3.  Random forest regression","title":"3.  Random forest regression","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/cpu_examples/breast_cancer_biopsy/src/09_get_model_output/#","page":"9.  Directly access model output","title":"9.  Directly access model output","text":"EditURL = \"https://github.com/bcbi/PredictMD.jl/blob/master/templates/examples/cpu_examples/breast_cancer_biopsy/src/09_get_model_output.jl\"","category":"page"},{"location":"examples/cpu_examples/breast_cancer_biopsy/src/09_get_model_output/#","page":"9.  Directly access model output","title":"9.  Directly access model output","text":"# This file was generated by PredictMD version 0.34.21\n# For help, please visit https://predictmd.net\n\nusing PredictMDExtra\nPredictMDExtra.import_all()\n\nusing PredictMD\nPredictMD.import_all()\n\nusing CSVFiles\nusing CategoricalArrays\nusing DataFrames\nusing DecisionTree\nusing Distributions\nusing FileIO\nusing GLM\nusing IterTools\nusing Knet\nusing LIBSVM\nusing LinearAlgebra\nusing PredictMD\nusing PredictMDAPI\nusing PredictMDExtra\nusing RDatasets\nusing Random\nusing StatsModels\nusing Test\nusing Unitful\n\nconst Schema = StatsModels.Schema\n\n\n\n### Begin project-specific settings\n\nDIRECTORY_CONTAINING_THIS_FILE = @__DIR__\nPROJECT_DIRECTORY = dirname(\n    joinpath(splitpath(DIRECTORY_CONTAINING_THIS_FILE)...)\n    )\nPROJECT_OUTPUT_DIRECTORY = joinpath(\n    PROJECT_DIRECTORY,\n    \"output\",\n    )\nmkpath(PROJECT_OUTPUT_DIRECTORY)\nmkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, \"data\"))\nmkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, \"models\"))\nmkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, \"plots\"))\n\n\n\n\n\n### End project-specific settings\n\n### Begin model output code\n\nKernel = LIBSVM.Kernel\n\nRandom.seed!(999)\n\ntrainingandtuning_features_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"trainingandtuning_features_df.csv\",\n    )\ntrainingandtuning_labels_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"trainingandtuning_labels_df.csv\",\n    )\ntesting_features_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"testing_features_df.csv\",\n    )\ntesting_labels_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"testing_labels_df.csv\",\n    )\ntraining_features_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"training_features_df.csv\",\n    )\ntraining_labels_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"training_labels_df.csv\",\n    )\ntuning_features_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"tuning_features_df.csv\",\n    )\ntuning_labels_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"tuning_labels_df.csv\",\n    )\ntrainingandtuning_features_df = DataFrames.DataFrame(\n    FileIO.load(\n        trainingandtuning_features_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntrainingandtuning_labels_df = DataFrames.DataFrame(\n    FileIO.load(\n        trainingandtuning_labels_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntesting_features_df = DataFrames.DataFrame(\n    FileIO.load(\n        testing_features_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntesting_labels_df = DataFrames.DataFrame(\n    FileIO.load(\n        testing_labels_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntraining_features_df = DataFrames.DataFrame(\n    FileIO.load(\n        training_features_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntraining_labels_df = DataFrames.DataFrame(\n    FileIO.load(\n        training_labels_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntuning_features_df = DataFrames.DataFrame(\n    FileIO.load(\n        tuning_features_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntuning_labels_df = DataFrames.DataFrame(\n    FileIO.load(\n        tuning_labels_df_filename;\n        type_detect_rows = 100,\n        )\n    )\n\nsmoted_training_features_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"smoted_training_features_df.csv\",\n    )\nsmoted_training_labels_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"smoted_training_labels_df.csv\",\n    )\nsmoted_training_features_df = DataFrames.DataFrame(\n    FileIO.load(\n        smoted_training_features_df_filename;\n        type_detect_rows = 100,\n        )\n    )\nsmoted_training_labels_df = DataFrames.DataFrame(\n    FileIO.load(\n        smoted_training_labels_df_filename;\n        type_detect_rows = 100,\n        )\n    )\n\nlogistic_classifier_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"models\",\n    \"logistic_classifier.jld2\",\n    )\nrandom_forest_classifier_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"models\",\n    \"random_forest_classifier.jld2\",\n    )\nc_svc_svm_classifier_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"models\",\n    \"c_svc_svm_classifier.jld2\",\n    )\nnu_svc_svm_classifier_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"models\",\n    \"nu_svc_svm_classifier.jld2\",\n    )\nknet_mlp_classifier_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"models\",\n    \"knet_mlp_classifier.jld2\",\n    )\n\n\n\nlogistic_classifier =\n    PredictMD.load_model(logistic_classifier_filename)\nrandom_forest_classifier =\n    PredictMD.load_model(random_forest_classifier_filename)\nc_svc_svm_classifier =\n    PredictMD.load_model(c_svc_svm_classifier_filename)\nnu_svc_svm_classifier =\n    PredictMD.load_model(nu_svc_svm_classifier_filename)\nknet_mlp_classifier =\n    PredictMD.load_model(knet_mlp_classifier_filename)\n\nPredictMD.parse_functions!(logistic_classifier)\nPredictMD.parse_functions!(random_forest_classifier)\nPredictMD.parse_functions!(c_svc_svm_classifier)\nPredictMD.parse_functions!(nu_svc_svm_classifier)\nPredictMD.parse_functions!(knet_mlp_classifier)\n\n\n\nPredictMD.predict_proba(logistic_classifier, smoted_training_features_df)\nPredictMD.predict_proba(random_forest_classifier, smoted_training_features_df)\nPredictMD.predict_proba(c_svc_svm_classifier, smoted_training_features_df)\nPredictMD.predict_proba(nu_svc_svm_classifier, smoted_training_features_df)\nPredictMD.predict_proba(knet_mlp_classifier, smoted_training_features_df)\n\nPredictMD.predict_proba(logistic_classifier,testing_features_df)\nPredictMD.predict_proba(random_forest_classifier,testing_features_df)\nPredictMD.predict_proba(c_svc_svm_classifier,testing_features_df)\nPredictMD.predict_proba(nu_svc_svm_classifier,testing_features_df)\nPredictMD.predict_proba(knet_mlp_classifier,testing_features_df)\n\nPredictMD.predict(logistic_classifier,smoted_training_features_df)\nPredictMD.predict(random_forest_classifier,smoted_training_features_df)\nPredictMD.predict(c_svc_svm_classifier,smoted_training_features_df)\nPredictMD.predict(nu_svc_svm_classifier,smoted_training_features_df)\nPredictMD.predict(knet_mlp_classifier,smoted_training_features_df)\n\nPredictMD.predict(logistic_classifier,testing_features_df)\nPredictMD.predict(random_forest_classifier,testing_features_df)\nPredictMD.predict(c_svc_svm_classifier,testing_features_df)\nPredictMD.predict(nu_svc_svm_classifier,testing_features_df)\nPredictMD.predict(knet_mlp_classifier,testing_features_df)\n\nsingle_label_name = :Class\nnegative_class = \"benign\"\npositive_class = \"malignant\"\n\nPredictMD.predict(logistic_classifier,smoted_training_features_df, positive_class, 0.3)\nPredictMD.predict(random_forest_classifier,smoted_training_features_df, positive_class, 0.3)\nPredictMD.predict(c_svc_svm_classifier,smoted_training_features_df, positive_class, 0.3)\nPredictMD.predict(nu_svc_svm_classifier,smoted_training_features_df, positive_class, 0.3)\nPredictMD.predict(knet_mlp_classifier,smoted_training_features_df, positive_class, 0.3)\n\nPredictMD.predict(logistic_classifier,testing_features_df, positive_class, 0.3)\nPredictMD.predict(random_forest_classifier,testing_features_df, positive_class, 0.3)\nPredictMD.predict(c_svc_svm_classifier,testing_features_df, positive_class, 0.3)\nPredictMD.predict(nu_svc_svm_classifier,testing_features_df, positive_class, 0.3)\nPredictMD.predict(knet_mlp_classifier,testing_features_df, positive_class, 0.3)\n\n### End model output code\n\n\n\n\n\n# This file was generated by PredictMD version 0.34.21\n# For help, please visit https://predictmd.net","category":"page"},{"location":"examples/cpu_examples/breast_cancer_biopsy/src/09_get_model_output/#","page":"9.  Directly access model output","title":"9.  Directly access model output","text":"","category":"page"},{"location":"examples/cpu_examples/breast_cancer_biopsy/src/09_get_model_output/#","page":"9.  Directly access model output","title":"9.  Directly access model output","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/cpu_examples/boston_housing/src/01_preprocess_data/#","page":"1.  Preprocess data","title":"1.  Preprocess data","text":"EditURL = \"https://github.com/bcbi/PredictMD.jl/blob/master/templates/examples/cpu_examples/boston_housing/src/01_preprocess_data.jl\"","category":"page"},{"location":"examples/cpu_examples/boston_housing/src/01_preprocess_data/#","page":"1.  Preprocess data","title":"1.  Preprocess data","text":"# This file was generated by PredictMD version 0.34.21\n# For help, please visit https://predictmd.net\n\nusing PredictMDExtra\nPredictMDExtra.import_all()\n\nusing PredictMD\nPredictMD.import_all()\n\n\n\n### Begin project-specific settings\n\nDIRECTORY_CONTAINING_THIS_FILE = @__DIR__\nPROJECT_DIRECTORY = dirname(\n    joinpath(splitpath(DIRECTORY_CONTAINING_THIS_FILE)...)\n    )\nPROJECT_OUTPUT_DIRECTORY = joinpath(\n    PROJECT_DIRECTORY,\n    \"output\",\n    )\nmkpath(PROJECT_OUTPUT_DIRECTORY)\nmkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, \"data\"))\nmkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, \"models\"))\nmkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, \"plots\"))\n\n\n\n### End project-specific settings\n\n### Begin data preprocessing code\n\nRandom.seed!(999)\n\ndf = RDatasets.dataset(\"MASS\", \"Boston\")\n\n# PredictMD requires that you provide your data in a DataFrame.\n\n# If your data are in a CSV file (e.g. \"data.csv\"), load them into\n# a DataFrame named `df` with:\n# df = DataFrames.DataFrame(CSVFiles.load(\"data.csv\"; type_detect_rows = 10_000))\n\n# If your data are in a gzipped CSV file (e.g. \"data.csv.gz\"), load them into\n# a DataFrame named `df` with:\n# df = DataFrames.DataFrame(CSVFiles.load(CSVFiles.File(CSVFiles.format\"CSV\", \"data.csv.gz\"); type_detect_rows = 10_000))\n\n# If your data are in some other format, use the appropriate Julia package to\n# load your data into a DataFrame named `df`.\n\n\n\ncategorical_feature_names = Symbol[]\ncontinuous_feature_names = Symbol[\n    :Crim,\n    :Zn,\n    :Indus,\n    :Chas,\n    :NOx,\n    :Rm,\n    :Age,\n    :Dis,\n    :Rad,\n    :Tax,\n    :PTRatio,\n    :Black,\n    :LStat,\n    ]\ncategorical_feature_names_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"categorical_feature_names.jld2\",\n    )\ncontinuous_feature_names_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"continuous_feature_names.jld2\",\n    )\n\n\n\nFileIO.save(\n    categorical_feature_names_filename,\n    \"categorical_feature_names\",\n    categorical_feature_names,\n    )\nFileIO.save(\n    continuous_feature_names_filename,\n    \"continuous_feature_names\",\n    continuous_feature_names,\n    )\nfeature_names = vcat(categorical_feature_names, continuous_feature_names)\n\nsingle_label_name = :MedV\n\ncontinuous_label_names = Symbol[single_label_name]\ncategorical_label_names = Symbol[]\nlabel_names = vcat(categorical_label_names, continuous_label_names)\n\ndf = df[:, vcat(feature_names, label_names)]\nDataFrames.dropmissing!(df; disallowmissing=true,)\nPredictMD.shuffle_rows!(df)\n\nPredictMD.fix_column_types!(\n    df;\n    categorical_feature_names = categorical_feature_names,\n    continuous_feature_names = continuous_feature_names,\n    categorical_label_names = categorical_label_names,\n    continuous_label_names = continuous_label_names,\n    )\nPredictMD.check_column_types(\n    df;\n    categorical_feature_names = categorical_feature_names,\n    continuous_feature_names = continuous_feature_names,\n    categorical_label_names = categorical_label_names,\n    continuous_label_names = continuous_label_names,\n    )\n\n\n\nfeatures_df = df[feature_names]\nlabels_df = df[label_names]\n\nDataFrames.describe(labels_df[single_label_name])\n\n(trainingandtuning_features_df,\n    trainingandtuning_labels_df,\n    testing_features_df,\n    testing_labels_df,) = PredictMD.split_data(\n        features_df,\n        labels_df,\n        0.75,\n        )\n(training_features_df,\n    training_labels_df,\n    tuning_features_df,\n    tuning_labels_df,) = PredictMD.split_data(\n        trainingandtuning_features_df,\n        trainingandtuning_labels_df,\n        2/3,\n        )\n\ntrainingandtuning_features_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"trainingandtuning_features_df.csv\",\n    )\ntrainingandtuning_labels_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"trainingandtuning_labels_df.csv\",\n    )\ntesting_features_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"testing_features_df.csv\",\n    )\ntesting_labels_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"testing_labels_df.csv\",\n    )\ntraining_features_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"training_features_df.csv\",\n    )\ntraining_labels_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"training_labels_df.csv\",\n    )\ntuning_features_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"tuning_features_df.csv\",\n    )\ntuning_labels_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"tuning_labels_df.csv\",\n    )\nFileIO.save(trainingandtuning_features_df_filename, trainingandtuning_features_df)\nFileIO.save(trainingandtuning_labels_df_filename, trainingandtuning_labels_df)\nFileIO.save(testing_features_df_filename, testing_features_df)\nFileIO.save(testing_labels_df_filename, testing_labels_df)\nFileIO.save(training_features_df_filename, training_features_df)\nFileIO.save(training_labels_df_filename, training_labels_df)\nFileIO.save(tuning_features_df_filename, tuning_features_df)\nFileIO.save(tuning_labels_df_filename, tuning_labels_df)\n\n\n\n### End data preprocessing code\n\n\n\n# This file was generated by PredictMD version 0.34.21\n# For help, please visit https://predictmd.net","category":"page"},{"location":"examples/cpu_examples/boston_housing/src/01_preprocess_data/#","page":"1.  Preprocess data","title":"1.  Preprocess data","text":"","category":"page"},{"location":"examples/cpu_examples/boston_housing/src/01_preprocess_data/#","page":"1.  Preprocess data","title":"1.  Preprocess data","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/cpu_examples/boston_housing/src/04_knet_mlp_regression/#","page":"4.  Knet neural network regression","title":"4.  Knet neural network regression","text":"EditURL = \"https://github.com/bcbi/PredictMD.jl/blob/master/templates/examples/cpu_examples/boston_housing/src/04_knet_mlp_regression.jl\"","category":"page"},{"location":"examples/cpu_examples/boston_housing/src/04_knet_mlp_regression/#","page":"4.  Knet neural network regression","title":"4.  Knet neural network regression","text":"# This file was generated by PredictMD version 0.34.21\n# For help, please visit https://predictmd.net\n\nusing PredictMDExtra\nPredictMDExtra.import_all()\n\nusing PredictMD\nPredictMD.import_all()\n\n\n\n### Begin project-specific settings\n\nDIRECTORY_CONTAINING_THIS_FILE = @__DIR__\nPROJECT_DIRECTORY = dirname(\n    joinpath(splitpath(DIRECTORY_CONTAINING_THIS_FILE)...)\n    )\nPROJECT_OUTPUT_DIRECTORY = joinpath(\n    PROJECT_DIRECTORY,\n    \"output\",\n    )\nmkpath(PROJECT_OUTPUT_DIRECTORY)\nmkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, \"data\"))\nmkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, \"models\"))\nmkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, \"plots\"))\n\n\n\n### End project-specific settings\n\n### Begin Knet neural network regression code\n\nRandom.seed!(999)\n\ntrainingandtuning_features_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"trainingandtuning_features_df.csv\",\n    )\ntrainingandtuning_labels_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"trainingandtuning_labels_df.csv\",\n    )\ntesting_features_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"testing_features_df.csv\",\n    )\ntesting_labels_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"testing_labels_df.csv\",\n    )\ntraining_features_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"training_features_df.csv\",\n    )\ntraining_labels_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"training_labels_df.csv\",\n    )\ntuning_features_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"tuning_features_df.csv\",\n    )\ntuning_labels_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"tuning_labels_df.csv\",\n    )\ntrainingandtuning_features_df = DataFrames.DataFrame(\n    FileIO.load(\n        trainingandtuning_features_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntrainingandtuning_labels_df = DataFrames.DataFrame(\n    FileIO.load(\n        trainingandtuning_labels_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntesting_features_df = DataFrames.DataFrame(\n    FileIO.load(\n        testing_features_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntesting_labels_df = DataFrames.DataFrame(\n    FileIO.load(\n        testing_labels_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntraining_features_df = DataFrames.DataFrame(\n    FileIO.load(\n        training_features_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntraining_labels_df = DataFrames.DataFrame(\n    FileIO.load(\n        training_labels_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntuning_features_df = DataFrames.DataFrame(\n    FileIO.load(\n        tuning_features_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntuning_labels_df = DataFrames.DataFrame(\n    FileIO.load(\n        tuning_labels_df_filename;\n        type_detect_rows = 100,\n        )\n    )\n\ncategorical_feature_names_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"categorical_feature_names.jld2\",\n    )\ncontinuous_feature_names_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"continuous_feature_names.jld2\",\n    )\ncategorical_feature_names = FileIO.load(\n    categorical_feature_names_filename,\n    \"categorical_feature_names\",\n    )\ncontinuous_feature_names = FileIO.load(\n    continuous_feature_names_filename,\n    \"continuous_feature_names\",\n    )\nfeature_names = vcat(categorical_feature_names, continuous_feature_names)\n\nsingle_label_name = :MedV\n\ncontinuous_label_names = Symbol[single_label_name]\ncategorical_label_names = Symbol[]\nlabel_names = vcat(categorical_label_names, continuous_label_names)\n\nknet_mlp_predict_function_source = \"\"\"\nfunction knetmlp_predict(\n        w,\n        x0::AbstractArray,\n        )\n    x1 = Knet.relu.( w[1]*x0 .+ w[2] )\n    x2 = w[3]*x1 .+ w[4]\n    return x2\nend\n\"\"\"\n\nknet_mlp_loss_function_source = \"\"\"\nfunction knetmlp_loss(\n        predict_function::Function,\n        modelweights,\n        x::AbstractArray,\n        ytrue::AbstractArray;\n        L1::Real = Float64(0),\n        L2::Real = Float64(0),\n        )\n    loss = Statistics.mean(\n        abs2,\n        ytrue - predict_function(\n            modelweights,\n            x,\n            ),\n        )\n    if L1 != 0\n        loss += L1 * sum(sum(abs, w_i) for w_i in modelweights[1:2:end])\n    end\n    if L2 != 0\n        loss += L2 * sum(sum(abs2, w_i) for w_i in modelweights[1:2:end])\n    end\n    return loss\nend\n\"\"\"\n\nfeature_contrasts =\n    PredictMD.generate_feature_contrasts(training_features_df, feature_names)\n\nknetmlp_modelweights = Any[\n    Float64.(\n        0.1f0*randn(Float64,10,feature_contrasts.num_array_columns_without_intercept)\n        ),\n    Float64.(\n        fill(Float64(0),10,1)\n        ),\n    Float64.(\n        0.1f0*randn(Float64,1,10)\n        ),\n    Float64.(\n        fill(Float64(0),1,1),\n        ),\n    ]\n\nknetmlp_losshyperparameters = Dict()\nknetmlp_losshyperparameters[:L1] = Float64(0.0)\nknetmlp_losshyperparameters[:L2] = Float64(0.0)\nknetmlp_optimizationalgorithm = :Adam\nknetmlp_optimizerhyperparameters = Dict()\nknetmlp_minibatchsize = 48\n\nknet_mlp_regression = PredictMD.single_labeldataframeknetregression(\n    feature_names,\n    single_label_name;\n    package = :Knet,\n    name = \"Knet MLP\",\n    predict_function_source = knet_mlp_predict_function_source,\n    loss_function_source = knet_mlp_loss_function_source,\n    losshyperparameters = knetmlp_losshyperparameters,\n    optimizationalgorithm = knetmlp_optimizationalgorithm,\n    optimizerhyperparameters = knetmlp_optimizerhyperparameters,\n    minibatchsize = knetmlp_minibatchsize,\n    modelweights = knetmlp_modelweights,\n    maxepochs = 100,\n    printlosseverynepochs = 10,\n    feature_contrasts = feature_contrasts,\n    )\n\nPredictMD.parse_functions!(knet_mlp_regression)\n\nPredictMD.fit!(\n    knet_mlp_regression,\n    training_features_df,\n    training_labels_df,\n    tuning_features_df,\n    tuning_labels_df,\n    )\n\nPredictMD.set_max_epochs!(knet_mlp_regression, 200)\n\nPredictMD.fit!(\n    knet_mlp_regression,\n    training_features_df,\n    training_labels_df,\n    tuning_features_df,\n    tuning_labels_df,\n    )\n\n\n\nknet_learningcurve_lossvsepoch = PredictMD.plotlearningcurve(\n    knet_mlp_regression,\n    :loss_vs_epoch;\n    );\n\n\n\ndisplay(knet_learningcurve_lossvsepoch)\nPredictMD.save_plot(\n    joinpath(\n        PROJECT_OUTPUT_DIRECTORY,\n        \"plots\",\n        \"knet_learningcurve_lossvsepoch.pdf\",\n        ),\n    knet_learningcurve_lossvsepoch,\n    )\n\nknet_learningcurve_lossvsepoch_skip10epochs = PredictMD.plotlearningcurve(\n    knet_mlp_regression,\n    :loss_vs_epoch;\n    startat = 10,\n    endat = :end,\n    );\n\n\n\ndisplay(knet_learningcurve_lossvsepoch_skip10epochs)\nPredictMD.save_plot(\n    joinpath(\n        PROJECT_OUTPUT_DIRECTORY,\n        \"plots\",\n        \"knet_learningcurve_lossvsepoch_skip10epochs.pdf\",\n        ),\n    knet_learningcurve_lossvsepoch_skip10epochs,\n    )\n\nknet_learningcurve_lossvsiteration = PredictMD.plotlearningcurve(\n    knet_mlp_regression,\n    :loss_vs_iteration;\n    window = 50,\n    sampleevery = 10,\n    );\n\n\n\ndisplay(knet_learningcurve_lossvsiteration)\nPredictMD.save_plot(\n    joinpath(\n        PROJECT_OUTPUT_DIRECTORY,\n        \"plots\",\n        \"knet_learningcurve_lossvsiteration.pdf\",\n        ),\n    knet_learningcurve_lossvsiteration,\n    )\n\nknet_learningcurve_lossvsiteration_skip100iterations =\n    PredictMD.plotlearningcurve(\n        knet_mlp_regression,\n        :loss_vs_iteration;\n        window = 50,\n        sampleevery = 10,\n        startat = 100,\n        endat = :end,\n        );\n\n\n\ndisplay(knet_learningcurve_lossvsiteration_skip100iterations)\nPredictMD.save_plot(\n    joinpath(\n        PROJECT_OUTPUT_DIRECTORY,\n        \"plots\",\n        \"knet_learningcurve_lossvsiteration_skip100iterations.pdf\",\n        ),\n    knet_learningcurve_lossvsiteration_skip100iterations,\n    )\n\nknet_mlp_regression_plot_training =\n    PredictMD.plotsinglelabelregressiontrueversuspredicted(\n        knet_mlp_regression,\n        training_features_df,\n        training_labels_df,\n        single_label_name,\n        );\n\n\n\ndisplay(knet_mlp_regression_plot_training)\nPredictMD.save_plot(\n    joinpath(\n        PROJECT_OUTPUT_DIRECTORY,\n        \"plots\",\n        \"knet_mlp_regression_plot_training.pdf\",\n        ),\n    knet_mlp_regression_plot_training,\n    )\n\nknet_mlp_regression_plot_testing =\n    PredictMD.plotsinglelabelregressiontrueversuspredicted(\n        knet_mlp_regression,\n        testing_features_df,\n        testing_labels_df,\n        single_label_name,\n        );\n\n\n\ndisplay(knet_mlp_regression_plot_testing)\nPredictMD.save_plot(\n    joinpath(\n        PROJECT_OUTPUT_DIRECTORY,\n        \"plots\",\n        \"knet_mlp_regression_plot_testing.pdf\",\n        ),\n    knet_mlp_regression_plot_testing,\n    )\n\nshow(\n    PredictMD.singlelabelregressionmetrics(\n        knet_mlp_regression,\n        training_features_df,\n        training_labels_df,\n        single_label_name,\n        );\n    allrows = true,\n    allcols = true,\n    splitcols = false,\n    )\n\nshow(\n    PredictMD.singlelabelregressionmetrics(\n        knet_mlp_regression,\n        testing_features_df,\n        testing_labels_df,\n        single_label_name,\n        );\n    allrows = true,\n    allcols = true,\n    splitcols = false,\n    )\n\nknet_mlp_regression_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"models\",\n    \"knet_mlp_regression.jld2\",\n    )\n\nPredictMD.save_model(knet_mlp_regression_filename, knet_mlp_regression)\n\n\n\n### End Knet neural network regression code\n\n\n\n# This file was generated by PredictMD version 0.34.21\n# For help, please visit https://predictmd.net","category":"page"},{"location":"examples/cpu_examples/boston_housing/src/04_knet_mlp_regression/#","page":"4.  Knet neural network regression","title":"4.  Knet neural network regression","text":"","category":"page"},{"location":"examples/cpu_examples/boston_housing/src/04_knet_mlp_regression/#","page":"4.  Knet neural network regression","title":"4.  Knet neural network regression","text":"This page was generated using Literate.jl.","category":"page"},{"location":"library/internals/#Documentation-of-internals-1","page":"Internals","title":"Documentation of internals","text":"","category":"section"},{"location":"library/internals/#","page":"Internals","title":"Internals","text":"Pages = [\"internals.md\"]","category":"page"},{"location":"library/internals/#Modules-1","page":"Internals","title":"Modules","text":"","category":"section"},{"location":"library/internals/#","page":"Internals","title":"Internals","text":"Modules = [\n    PredictMD,\n    PredictMD.Cleaning,\n    PredictMD.Compilation,\n    PredictMD.GPU,\n    PredictMD.Server,\n    ]\nOrder = [:module]","category":"page"},{"location":"library/internals/#PredictMD.PredictMD","page":"Internals","title":"PredictMD.PredictMD","text":"\n\n\n\n","category":"module"},{"location":"library/internals/#PredictMD.Cleaning","page":"Internals","title":"PredictMD.Cleaning","text":"\n\n\n\n","category":"module"},{"location":"library/internals/#PredictMD.Compilation","page":"Internals","title":"PredictMD.Compilation","text":"\n\n\n\n","category":"module"},{"location":"library/internals/#PredictMD.GPU","page":"Internals","title":"PredictMD.GPU","text":"\n\n\n\n","category":"module"},{"location":"library/internals/#PredictMD.Server","page":"Internals","title":"PredictMD.Server","text":"\n\n\n\n","category":"module"},{"location":"library/internals/#Constants-1","page":"Internals","title":"Constants","text":"","category":"section"},{"location":"library/internals/#","page":"Internals","title":"Internals","text":"Modules = [\n    PredictMD,\n    PredictMD.Cleaning,\n    PredictMD.Compilation,\n    PredictMD.GPU,\n    PredictMD.Server,\n    ]\nOrder = [:constant]","category":"page"},{"location":"library/internals/#Types-1","page":"Internals","title":"Types","text":"","category":"section"},{"location":"library/internals/#","page":"Internals","title":"Internals","text":"Modules = [\n    PredictMD,\n    PredictMD.Cleaning,\n    PredictMD.Compilation,\n    PredictMD.GPU,\n    PredictMD.Server,\n    ]\nOrder = [:type]","category":"page"},{"location":"library/internals/#PredictMD.CrossValidation","page":"Internals","title":"PredictMD.CrossValidation","text":"\n\n\n\n","category":"type"},{"location":"library/internals/#PredictMD.DataFrameFeatureContrasts","page":"Internals","title":"PredictMD.DataFrameFeatureContrasts","text":"\n\n\n\n","category":"type"},{"location":"library/internals/#PredictMD.DataFrameFeatureContrasts-Tuple{DataFrames.AbstractDataFrame, AbstractVector{Symbol}}","page":"Internals","title":"PredictMD.DataFrameFeatureContrasts","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.DecisionTreeModel","page":"Internals","title":"PredictMD.DecisionTreeModel","text":"\n\n\n\n","category":"type"},{"location":"library/internals/#PredictMD.GLMModel","page":"Internals","title":"PredictMD.GLMModel","text":"\n\n\n\n","category":"type"},{"location":"library/internals/#PredictMD.ImmutableDataFrame2GLMSingleLabelBinaryClassTransformer","page":"Internals","title":"PredictMD.ImmutableDataFrame2GLMSingleLabelBinaryClassTransformer","text":"\n\n\n\n","category":"type"},{"location":"library/internals/#PredictMD.ImmutableFeatureArrayTransposerTransformer","page":"Internals","title":"PredictMD.ImmutableFeatureArrayTransposerTransformer","text":"\n\n\n\n","category":"type"},{"location":"library/internals/#PredictMD.ImmutablePackageMultiLabelPredictionTransformer","page":"Internals","title":"PredictMD.ImmutablePackageMultiLabelPredictionTransformer","text":"\n\n\n\n","category":"type"},{"location":"library/internals/#PredictMD.ImmutablePackageSingleLabelPredictProbaTransformer","page":"Internals","title":"PredictMD.ImmutablePackageSingleLabelPredictProbaTransformer","text":"\n\n\n\n","category":"type"},{"location":"library/internals/#PredictMD.ImmutablePackageSingleLabelPredictionTransformer","page":"Internals","title":"PredictMD.ImmutablePackageSingleLabelPredictionTransformer","text":"\n\n\n\n","category":"type"},{"location":"library/internals/#PredictMD.ImmutablePredictProbaSingleLabelInt2StringTransformer","page":"Internals","title":"PredictMD.ImmutablePredictProbaSingleLabelInt2StringTransformer","text":"\n\n\n\n","category":"type"},{"location":"library/internals/#PredictMD.ImmutablePredictionsSingleLabelInt2StringTransformer","page":"Internals","title":"PredictMD.ImmutablePredictionsSingleLabelInt2StringTransformer","text":"\n\n\n\n","category":"type"},{"location":"library/internals/#PredictMD.KnetModel","page":"Internals","title":"PredictMD.KnetModel","text":"\n\n\n\n","category":"type"},{"location":"library/internals/#PredictMD.LIBSVMModel","page":"Internals","title":"PredictMD.LIBSVMModel","text":"\n\n\n\n","category":"type"},{"location":"library/internals/#PredictMD.MutableDataFrame2ClassificationKnetTransformer","page":"Internals","title":"PredictMD.MutableDataFrame2ClassificationKnetTransformer","text":"\n\n\n\n","category":"type"},{"location":"library/internals/#PredictMD.MutableDataFrame2DecisionTreeTransformer","page":"Internals","title":"PredictMD.MutableDataFrame2DecisionTreeTransformer","text":"\n\n\n\n","category":"type"},{"location":"library/internals/#PredictMD.MutableDataFrame2RegressionKnetTransformer","page":"Internals","title":"PredictMD.MutableDataFrame2RegressionKnetTransformer","text":"\n\n\n\n","category":"type"},{"location":"library/internals/#PredictMD.SimplePipeline","page":"Internals","title":"PredictMD.SimplePipeline","text":"\n\n\n\n","category":"type"},{"location":"library/internals/#PredictMD.SimplePipeline-Union{Tuple{S}, Tuple{T}, Tuple{F}} where {F<:PredictMDAPI.AbstractFittable, T<:AbstractVector{F}, S<:AbstractString}","page":"Internals","title":"PredictMD.SimplePipeline","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#Functions-1","page":"Internals","title":"Functions","text":"","category":"section"},{"location":"library/internals/#","page":"Internals","title":"Internals","text":"Modules = [\n    PredictMD,\n    PredictMD.Cleaning,\n    PredictMD.Compilation,\n    PredictMD.GPU,\n    PredictMD.Server,\n    ]\nOrder = [:function]","category":"page"},{"location":"library/internals/#PredictMD.DataFrame2LIBSVMTransformer-Tuple{AbstractVector{T} where T, Symbol}","page":"Internals","title":"PredictMD.DataFrame2LIBSVMTransformer","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.accuracy-Tuple{MLBase.ROCNums}","page":"Internals","title":"PredictMD.accuracy","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.auprc-Tuple{AbstractVector{var\"#s339\"} where var\"#s339\"<:Integer, AbstractVector{var\"#s338\"} where var\"#s338\"<:Real}","page":"Internals","title":"PredictMD.auprc","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.aurocc-Tuple{AbstractVector{var\"#s340\"} where var\"#s340\"<:Integer, AbstractVector{var\"#s339\"} where var\"#s339\"<:Real}","page":"Internals","title":"PredictMD.aurocc","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.averageprecisionscore-Tuple{AbstractVector{var\"#s339\"} where var\"#s339\"<:Integer, AbstractVector{var\"#s338\"} where var\"#s338\"<:Real}","page":"Internals","title":"PredictMD.averageprecisionscore","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.avg_precision-Tuple{AbstractVector{var\"#s338\"} where var\"#s338\"<:Real, AbstractVector{var\"#s287\"} where var\"#s287\"<:Real, AbstractVector{var\"#s286\"} where var\"#s286\"<:Real}","page":"Internals","title":"PredictMD.avg_precision","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.binary_brier_score-Tuple{AbstractVector{var\"#s340\"} where var\"#s340\"<:Integer, AbstractVector{var\"#s339\"} where var\"#s339\"<:AbstractFloat}","page":"Internals","title":"PredictMD.binary_brier_score","text":"binary_brier_score(ytrue, yscore)\n\nComputes the binary formulation of the Brier score, defined as:\n\nfrac1Nsumlimits _t=1^N(f_t-o_t)^2 \n\nLower values are better. Best value is 0.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.calculate_smote_pct_under-Tuple{}","page":"Internals","title":"PredictMD.calculate_smote_pct_under","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.check_column_types-Tuple{DataFrames.AbstractDataFrame}","page":"Internals","title":"PredictMD.check_column_types","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.cohen_kappa-Tuple{AbstractMatrix{T} where T}","page":"Internals","title":"PredictMD.cohen_kappa","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.cohen_kappa-Tuple{AbstractVector{T} where T, AbstractVector{T} where T}","page":"Internals","title":"PredictMD.cohen_kappa","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.cohen_kappa-Tuple{MLBase.ROCNums}","page":"Internals","title":"PredictMD.cohen_kappa","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.compute_contingency_table-Tuple{AbstractVector{T} where T, AbstractVector{T} where T}","page":"Internals","title":"PredictMD.compute_contingency_table","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.compute_contingency_table-Tuple{MLBase.ROCNums}","page":"Internals","title":"PredictMD.compute_contingency_table","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.convert_value_to_missing!","page":"Internals","title":"PredictMD.convert_value_to_missing!","text":"\n\n\n\n","category":"function"},{"location":"library/internals/#PredictMD.delete_nothings!-Tuple{AbstractVector{T} where T}","page":"Internals","title":"PredictMD.delete_nothings!","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.f1score-Tuple{MLBase.ROCNums}","page":"Internals","title":"PredictMD.f1score","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.false_negative_rate-Tuple{MLBase.ROCNums}","page":"Internals","title":"PredictMD.false_negative_rate","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.false_positive_rate-Tuple{MLBase.ROCNums}","page":"Internals","title":"PredictMD.false_positive_rate","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.fbetascore-Tuple{MLBase.ROCNums, Real}","page":"Internals","title":"PredictMD.fbetascore","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.filename_extension-Tuple{AbstractString}","page":"Internals","title":"PredictMD.filename_extension","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.fit!","page":"Internals","title":"PredictMD.fit!","text":"\n\n\n\n","category":"function"},{"location":"library/internals/#PredictMD.fit!","page":"Internals","title":"PredictMD.fit!","text":"\n\n\n\n","category":"function"},{"location":"library/internals/#PredictMD.fit!","page":"Internals","title":"PredictMD.fit!","text":"\n\n\n\n","category":"function"},{"location":"library/internals/#PredictMD.fit!-Tuple{PredictMD.DecisionTreeModel, AbstractArray, AbstractArray}","page":"Internals","title":"PredictMD.fit!","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.fit!-Tuple{PredictMD.GLMModel, DataFrames.AbstractDataFrame, DataFrames.AbstractDataFrame}","page":"Internals","title":"PredictMD.fit!","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.fit!-Tuple{PredictMD.ImmutableDataFrame2GLMSingleLabelBinaryClassTransformer, DataFrames.AbstractDataFrame, DataFrames.AbstractDataFrame}","page":"Internals","title":"PredictMD.fit!","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.fit!-Tuple{PredictMD.ImmutableFeatureArrayTransposerTransformer, AbstractMatrix{T} where T, AbstractArray}","page":"Internals","title":"PredictMD.fit!","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.fit!-Tuple{PredictMD.ImmutablePackageMultiLabelPredictionTransformer, Vararg{Any, N} where N}","page":"Internals","title":"PredictMD.fit!","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.fit!-Tuple{PredictMD.ImmutablePackageSingleLabelPredictProbaTransformer, Vararg{Any, N} where N}","page":"Internals","title":"PredictMD.fit!","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.fit!-Tuple{PredictMD.ImmutablePackageSingleLabelPredictionTransformer, Vararg{Any, N} where N}","page":"Internals","title":"PredictMD.fit!","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.fit!-Tuple{PredictMD.ImmutablePredictProbaSingleLabelInt2StringTransformer, Vararg{Any, N} where N}","page":"Internals","title":"PredictMD.fit!","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.fit!-Tuple{PredictMD.ImmutablePredictionsSingleLabelInt2StringTransformer, Vararg{Any, N} where N}","page":"Internals","title":"PredictMD.fit!","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.fit!-Tuple{PredictMD.LIBSVMModel, AbstractArray, AbstractArray}","page":"Internals","title":"PredictMD.fit!","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.fit!-Tuple{PredictMD.MutableDataFrame2DecisionTreeTransformer, DataFrames.AbstractDataFrame, DataFrames.AbstractDataFrame}","page":"Internals","title":"PredictMD.fit!","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.fit!-Tuple{PredictMD.SimplePipeline, Vararg{Any, N} where N}","page":"Internals","title":"PredictMD.fit!","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.fix_column_types!-Tuple{DataFrames.AbstractDataFrame}","page":"Internals","title":"PredictMD.fix_column_types!","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.fix_type","page":"Internals","title":"PredictMD.fix_type","text":"\n\n\n\n","category":"function"},{"location":"library/internals/#PredictMD.flatten-Tuple{Type{PredictMD.SimplePipeline}, PredictMD.SimplePipeline}","page":"Internals","title":"PredictMD.flatten","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.generate_feature_contrasts-Tuple{DataFrames.AbstractDataFrame, AbstractVector{Symbol}}","page":"Internals","title":"PredictMD.generate_feature_contrasts","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.generate_formula-Tuple{AbstractVector{var\"#s287\"} where var\"#s287\"<:Symbol, AbstractVector{var\"#s286\"} where var\"#s286\"<:Symbol}","page":"Internals","title":"PredictMD.generate_formula","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.generate_formula-Tuple{AbstractVector{var\"#s737\"} where var\"#s737\"<:StatsModels.AbstractTerm, AbstractVector{var\"#s736\"} where var\"#s736\"<:StatsModels.AbstractTerm}","page":"Internals","title":"PredictMD.generate_formula","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.generate_formula-Tuple{Symbol, AbstractVector{var\"#s342\"} where var\"#s342\"<:Symbol}","page":"Internals","title":"PredictMD.generate_formula","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.get_binary_thresholds-Tuple{AbstractVector{var\"#s338\"} where var\"#s338\"<:Real}","page":"Internals","title":"PredictMD.get_binary_thresholds","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.get_history-Tuple{PredictMD.KnetModel}","page":"Internals","title":"PredictMD.get_history","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.get_history-Tuple{PredictMD.SimplePipeline}","page":"Internals","title":"PredictMD.get_history","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.get_underlying-Tuple{PredictMD.DecisionTreeModel}","page":"Internals","title":"PredictMD.get_underlying","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.get_underlying-Tuple{PredictMD.GLMModel}","page":"Internals","title":"PredictMD.get_underlying","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.get_underlying-Tuple{PredictMD.KnetModel}","page":"Internals","title":"PredictMD.get_underlying","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.get_underlying-Tuple{PredictMD.LIBSVMModel}","page":"Internals","title":"PredictMD.get_underlying","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.get_underlying-Tuple{PredictMD.MutableDataFrame2ClassificationKnetTransformer}","page":"Internals","title":"PredictMD.get_underlying","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.get_underlying-Tuple{PredictMD.MutableDataFrame2DecisionTreeTransformer}","page":"Internals","title":"PredictMD.get_underlying","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.get_underlying-Tuple{PredictMD.MutableDataFrame2RegressionKnetTransformer}","page":"Internals","title":"PredictMD.get_underlying","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.get_underlying-Tuple{PredictMD.SimplePipeline}","page":"Internals","title":"PredictMD.get_underlying","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.getallrocnums-Tuple{AbstractVector{var\"#s285\"} where var\"#s285\"<:Integer, AbstractVector{var\"#s283\"} where var\"#s283\"<:Real}","page":"Internals","title":"PredictMD.getallrocnums","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.getlabelint2stringmap-Tuple{AbstractVector{T} where T, Integer}","page":"Internals","title":"PredictMD.getlabelint2stringmap","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.getlabelstring2intmap-Tuple{AbstractVector{T} where T, Integer}","page":"Internals","title":"PredictMD.getlabelstring2intmap","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.icd9_code_to_single_level_dx_ccs-Tuple{AbstractString}","page":"Internals","title":"PredictMD.icd9_code_to_single_level_dx_ccs","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.inverse-Tuple{AbstractDict}","page":"Internals","title":"PredictMD.inverse","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.is_ci","page":"Internals","title":"PredictMD.is_ci","text":"\n\n\n\n","category":"function"},{"location":"library/internals/#PredictMD.is_ci_or_runtests","page":"Internals","title":"PredictMD.is_ci_or_runtests","text":"\n\n\n\n","category":"function"},{"location":"library/internals/#PredictMD.is_ci_or_runtests_or_docs_or_examples","page":"Internals","title":"PredictMD.is_ci_or_runtests_or_docs_or_examples","text":"\n\n\n\n","category":"function"},{"location":"library/internals/#PredictMD.is_deploy_docs","page":"Internals","title":"PredictMD.is_deploy_docs","text":"\n\n\n\n","category":"function"},{"location":"library/internals/#PredictMD.is_docs_or_examples","page":"Internals","title":"PredictMD.is_docs_or_examples","text":"\n\n\n\n","category":"function"},{"location":"library/internals/#PredictMD.is_make_docs","page":"Internals","title":"PredictMD.is_make_docs","text":"\n\n\n\n","category":"function"},{"location":"library/internals/#PredictMD.is_make_examples","page":"Internals","title":"PredictMD.is_make_examples","text":"\n\n\n\n","category":"function"},{"location":"library/internals/#PredictMD.is_nothing","page":"Internals","title":"PredictMD.is_nothing","text":"\n\n\n\n","category":"function"},{"location":"library/internals/#PredictMD.is_one_to_one-Tuple{AbstractDict}","page":"Internals","title":"PredictMD.is_one_to_one","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.is_runtests","page":"Internals","title":"PredictMD.is_runtests","text":"\n\n\n\n","category":"function"},{"location":"library/internals/#PredictMD.is_square-Tuple{AbstractMatrix{T} where T}","page":"Internals","title":"PredictMD.is_square","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.is_travis_ci","page":"Internals","title":"PredictMD.is_travis_ci","text":"\n\n\n\n","category":"function"},{"location":"library/internals/#PredictMD.is_travis_ci_on_linux","page":"Internals","title":"PredictMD.is_travis_ci_on_linux","text":"\n\n\n\n","category":"function"},{"location":"library/internals/#PredictMD.isflat","page":"Internals","title":"PredictMD.isflat","text":"\n\n\n\n","category":"function"},{"location":"library/internals/#PredictMD.ispipeline","page":"Internals","title":"PredictMD.ispipeline","text":"\n\n\n\n","category":"function"},{"location":"library/internals/#PredictMD.load_model-Tuple{AbstractString}","page":"Internals","title":"PredictMD.load_model","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.mean_square_error-Tuple{AbstractVector{var\"#s340\"} where var\"#s340\"<:Real, AbstractVector{var\"#s339\"} where var\"#s339\"<:Real}","page":"Internals","title":"PredictMD.mean_square_error","text":"mean_square_error(ytrue, ypred)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.multilabelprobabilitiestopredictions-Tuple{AbstractDict, AbstractDict}","page":"Internals","title":"PredictMD.multilabelprobabilitiestopredictions","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.multilabelprobabilitiestopredictions-Tuple{AbstractDict}","page":"Internals","title":"PredictMD.multilabelprobabilitiestopredictions","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.negative_predictive_value-Tuple{MLBase.ROCNums}","page":"Internals","title":"PredictMD.negative_predictive_value","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.open_plots_during_tests","page":"Internals","title":"PredictMD.open_plots_during_tests","text":"\n\n\n\n","category":"function"},{"location":"library/internals/#PredictMD.package_directory-Tuple","page":"Internals","title":"PredictMD.package_directory","text":"package_directory(parts...)::String\n\nEquivalent to abspath(joinpath(abspath(package_directory()), parts...)).\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.package_directory-Tuple{}","page":"Internals","title":"PredictMD.package_directory","text":"package_directory()::String\n\nReturn the PredictMD package directory.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.parse_functions!-Tuple{PredictMD.SimplePipeline}","page":"Internals","title":"PredictMD.parse_functions!","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.plot_probability_calibration_curve-Tuple{PredictMDAPI.AbstractFittable, DataFrames.AbstractDataFrame, DataFrames.AbstractDataFrame, Symbol, AbstractString}","page":"Internals","title":"PredictMD.plot_probability_calibration_curve","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.plot_probability_calibration_curve-Union{Tuple{F}, Tuple{AbstractVector{F}, AbstractVector{F}}} where F<:AbstractFloat","page":"Internals","title":"PredictMD.plot_probability_calibration_curve","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.plotlearningcurve","page":"Internals","title":"PredictMD.plotlearningcurve","text":"\n\n\n\n","category":"function"},{"location":"library/internals/#PredictMD.plotlearningcurve","page":"Internals","title":"PredictMD.plotlearningcurve","text":"\n\n\n\n","category":"function"},{"location":"library/internals/#PredictMD.plotlearningcurve-Tuple{AbstractVector{var\"#s286\"} where var\"#s286\"<:Real, AbstractVector{var\"#s285\"} where var\"#s285\"<:Real, AbstractString, AbstractString, AbstractString}","page":"Internals","title":"PredictMD.plotlearningcurve","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.plotprcurve-Tuple{AbstractVector{PredictMDAPI.AbstractFittable}, DataFrames.AbstractDataFrame, DataFrames.AbstractDataFrame, Symbol, AbstractString}","page":"Internals","title":"PredictMD.plotprcurve","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.plotprcurve-Tuple{PredictMDAPI.AbstractFittable, DataFrames.AbstractDataFrame, DataFrames.AbstractDataFrame, Symbol, AbstractString}","page":"Internals","title":"PredictMD.plotprcurve","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.plotroccurve-Tuple{AbstractVector{PredictMDAPI.AbstractFittable}, DataFrames.AbstractDataFrame, DataFrames.AbstractDataFrame, Symbol, AbstractString}","page":"Internals","title":"PredictMD.plotroccurve","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.plotroccurve-Tuple{PredictMDAPI.AbstractFittable, DataFrames.AbstractDataFrame, DataFrames.AbstractDataFrame, Symbol, AbstractString}","page":"Internals","title":"PredictMD.plotroccurve","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.plotsinglelabelbinaryclassifierhistogram-Tuple{PredictMDAPI.AbstractFittable, DataFrames.AbstractDataFrame, DataFrames.AbstractDataFrame, Symbol, AbstractVector{var\"#s342\"} where var\"#s342\"<:AbstractString}","page":"Internals","title":"PredictMD.plotsinglelabelbinaryclassifierhistogram","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.plotsinglelabelregressiontrueversuspredicted-Tuple{PredictMDAPI.AbstractFittable, DataFrames.AbstractDataFrame, DataFrames.AbstractDataFrame, Symbol}","page":"Internals","title":"PredictMD.plotsinglelabelregressiontrueversuspredicted","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.positive_predictive_value-Tuple{MLBase.ROCNums}","page":"Internals","title":"PredictMD.positive_predictive_value","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.prcurve-Tuple{AbstractVector{var\"#s339\"} where var\"#s339\"<:Integer, AbstractVector{var\"#s338\"} where var\"#s338\"<:Real}","page":"Internals","title":"PredictMD.prcurve","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.prcurve-Tuple{AbstractVector{var\"#s340\"} where var\"#s340\"<:MLBase.ROCNums, AbstractVector{var\"#s339\"} where var\"#s339\"<:Real}","page":"Internals","title":"PredictMD.prcurve","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.precision-Tuple{MLBase.ROCNums}","page":"Internals","title":"PredictMD.precision","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.predict-Tuple{PredictMD.DecisionTreeModel, AbstractArray, AbstractString, AbstractFloat}","page":"Internals","title":"PredictMD.predict","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.predict-Tuple{PredictMD.DecisionTreeModel, AbstractArray}","page":"Internals","title":"PredictMD.predict","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.predict-Tuple{PredictMD.GLMModel, DataFrames.AbstractDataFrame, Integer, AbstractFloat}","page":"Internals","title":"PredictMD.predict","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.predict-Tuple{PredictMD.GLMModel, DataFrames.AbstractDataFrame}","page":"Internals","title":"PredictMD.predict","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.predict-Tuple{PredictMD.ImmutableDataFrame2GLMSingleLabelBinaryClassTransformer, DataFrames.AbstractDataFrame, AbstractString, Vararg{Any, N} where N}","page":"Internals","title":"PredictMD.predict","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.predict-Tuple{PredictMD.ImmutableDataFrame2GLMSingleLabelBinaryClassTransformer, DataFrames.AbstractDataFrame}","page":"Internals","title":"PredictMD.predict","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.predict-Tuple{PredictMD.ImmutableFeatureArrayTransposerTransformer, AbstractMatrix{T} where T, Vararg{Any, N} where N}","page":"Internals","title":"PredictMD.predict","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.predict-Tuple{PredictMD.ImmutablePackageMultiLabelPredictionTransformer, AbstractMatrix{T} where T, Vararg{Any, N} where N}","page":"Internals","title":"PredictMD.predict","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.predict-Tuple{PredictMD.ImmutablePackageSingleLabelPredictProbaTransformer, Vararg{Any, N} where N}","page":"Internals","title":"PredictMD.predict","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.predict-Tuple{PredictMD.ImmutablePackageSingleLabelPredictionTransformer, AbstractVector{T} where T, Vararg{Any, N} where N}","page":"Internals","title":"PredictMD.predict","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.predict-Tuple{PredictMD.ImmutablePredictProbaSingleLabelInt2StringTransformer, Vararg{Any, N} where N}","page":"Internals","title":"PredictMD.predict","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.predict-Tuple{PredictMD.ImmutablePredictionsSingleLabelInt2StringTransformer, AbstractVector{T} where T, Vararg{Any, N} where N}","page":"Internals","title":"PredictMD.predict","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.predict-Tuple{PredictMD.ImmutablePredictionsSingleLabelInt2StringTransformer, DataFrames.AbstractDataFrame, Vararg{Any, N} where N}","page":"Internals","title":"PredictMD.predict","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.predict-Tuple{PredictMD.KnetModel, AbstractArray, Integer, AbstractFloat}","page":"Internals","title":"PredictMD.predict","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.predict-Tuple{PredictMD.KnetModel, AbstractArray}","page":"Internals","title":"PredictMD.predict","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.predict-Tuple{PredictMD.LIBSVMModel, AbstractArray, AbstractString, AbstractFloat}","page":"Internals","title":"PredictMD.predict","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.predict-Tuple{PredictMD.LIBSVMModel, AbstractArray}","page":"Internals","title":"PredictMD.predict","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.predict-Tuple{PredictMD.MutableDataFrame2ClassificationKnetTransformer, DataFrames.AbstractDataFrame, AbstractString, Vararg{Any, N} where N}","page":"Internals","title":"PredictMD.predict","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.predict-Tuple{PredictMD.MutableDataFrame2ClassificationKnetTransformer, DataFrames.AbstractDataFrame}","page":"Internals","title":"PredictMD.predict","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.predict-Tuple{PredictMD.MutableDataFrame2DecisionTreeTransformer, DataFrames.AbstractDataFrame, Vararg{Any, N} where N}","page":"Internals","title":"PredictMD.predict","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.predict-Tuple{PredictMD.MutableDataFrame2RegressionKnetTransformer, DataFrames.AbstractDataFrame}","page":"Internals","title":"PredictMD.predict","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.predict-Tuple{PredictMD.SimplePipeline, Vararg{Any, N} where N}","page":"Internals","title":"PredictMD.predict","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.predict_proba-Tuple{PredictMD.DecisionTreeModel, AbstractArray}","page":"Internals","title":"PredictMD.predict_proba","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.predict_proba-Tuple{PredictMD.GLMModel, DataFrames.AbstractDataFrame}","page":"Internals","title":"PredictMD.predict_proba","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.predict_proba-Tuple{PredictMD.ImmutableDataFrame2GLMSingleLabelBinaryClassTransformer, DataFrames.AbstractDataFrame}","page":"Internals","title":"PredictMD.predict_proba","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.predict_proba-Tuple{PredictMD.ImmutableFeatureArrayTransposerTransformer, AbstractMatrix{T} where T}","page":"Internals","title":"PredictMD.predict_proba","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.predict_proba-Tuple{PredictMD.ImmutablePackageMultiLabelPredictionTransformer, Vararg{Any, N} where N}","page":"Internals","title":"PredictMD.predict_proba","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.predict_proba-Tuple{PredictMD.ImmutablePackageSingleLabelPredictProbaTransformer, AbstractDict}","page":"Internals","title":"PredictMD.predict_proba","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.predict_proba-Tuple{PredictMD.ImmutablePackageSingleLabelPredictionTransformer, Vararg{Any, N} where N}","page":"Internals","title":"PredictMD.predict_proba","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.predict_proba-Tuple{PredictMD.ImmutablePredictProbaSingleLabelInt2StringTransformer, AbstractDict}","page":"Internals","title":"PredictMD.predict_proba","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.predict_proba-Tuple{PredictMD.ImmutablePredictionsSingleLabelInt2StringTransformer, Vararg{Any, N} where N}","page":"Internals","title":"PredictMD.predict_proba","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.predict_proba-Tuple{PredictMD.KnetModel, AbstractArray}","page":"Internals","title":"PredictMD.predict_proba","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.predict_proba-Tuple{PredictMD.LIBSVMModel, AbstractArray}","page":"Internals","title":"PredictMD.predict_proba","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.predict_proba-Tuple{PredictMD.MutableDataFrame2ClassificationKnetTransformer, DataFrames.AbstractDataFrame}","page":"Internals","title":"PredictMD.predict_proba","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.predict_proba-Tuple{PredictMD.MutableDataFrame2DecisionTreeTransformer, DataFrames.AbstractDataFrame}","page":"Internals","title":"PredictMD.predict_proba","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.predict_proba-Tuple{PredictMD.MutableDataFrame2RegressionKnetTransformer, DataFrames.AbstractDataFrame}","page":"Internals","title":"PredictMD.predict_proba","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.predict_proba-Tuple{PredictMD.SimplePipeline, Vararg{Any, N} where N}","page":"Internals","title":"PredictMD.predict_proba","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.predictionsassoctodataframe","page":"Internals","title":"PredictMD.predictionsassoctodataframe","text":"\n\n\n\n","category":"function"},{"location":"library/internals/#PredictMD.probability_calibration_metrics","page":"Internals","title":"PredictMD.probability_calibration_metrics","text":"\n\n\n\n","category":"function"},{"location":"library/internals/#PredictMD.probability_calibration_metrics-Tuple{PredictMDAPI.AbstractFittable, DataFrames.AbstractDataFrame, DataFrames.AbstractDataFrame, Symbol, AbstractString}","page":"Internals","title":"PredictMD.probability_calibration_metrics","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.probability_calibration_scores_and_fractions-Tuple{PredictMDAPI.AbstractFittable, DataFrames.AbstractDataFrame, DataFrames.AbstractDataFrame, Symbol, AbstractString}","page":"Internals","title":"PredictMD.probability_calibration_scores_and_fractions","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.probability_calibration_scores_and_fractions-Union{Tuple{F}, Tuple{AbstractVector{var\"#s341\"} where var\"#s341\"<:Integer, AbstractVector{F}}} where F<:AbstractFloat","page":"Internals","title":"PredictMD.probability_calibration_scores_and_fractions","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.r2_score-Tuple{AbstractVector{var\"#s340\"} where var\"#s340\"<:Real, AbstractVector{var\"#s339\"} where var\"#s339\"<:Real}","page":"Internals","title":"PredictMD.r2_score","text":"r2_score(ytrue, ypred)\n\nComputes coefficient of determination. Higher values are better. Best value is 1.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.recall-Tuple{MLBase.ROCNums}","page":"Internals","title":"PredictMD.recall","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.risk_score_cutoff_values-Tuple{AbstractVector{var\"#s285\"} where var\"#s285\"<:Integer, AbstractVector{var\"#s283\"} where var\"#s283\"<:AbstractFloat}","page":"Internals","title":"PredictMD.risk_score_cutoff_values","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.risk_score_cutoff_values-Tuple{PredictMDAPI.AbstractFittable, DataFrames.AbstractDataFrame, DataFrames.AbstractDataFrame, Symbol, AbstractString}","page":"Internals","title":"PredictMD.risk_score_cutoff_values","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.roccurve-Tuple{AbstractVector{var\"#s339\"} where var\"#s339\"<:Integer, AbstractVector{var\"#s338\"} where var\"#s338\"<:Real}","page":"Internals","title":"PredictMD.roccurve","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.roccurve-Tuple{AbstractVector{var\"#s340\"} where var\"#s340\"<:MLBase.ROCNums, AbstractVector{var\"#s339\"} where var\"#s339\"<:Real}","page":"Internals","title":"PredictMD.roccurve","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.root_mean_square_error-Tuple{Any, Any}","page":"Internals","title":"PredictMD.root_mean_square_error","text":"root_mean_square_error(ytrue, ypred)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.save_model-Tuple{AbstractString, PredictMDAPI.AbstractFittable}","page":"Internals","title":"PredictMD.save_model","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.sensitivity-Tuple{MLBase.ROCNums}","page":"Internals","title":"PredictMD.sensitivity","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.set_feature_contrasts!-Tuple{PredictMD.MutableDataFrame2ClassificationKnetTransformer, PredictMDAPI.AbstractFeatureContrasts}","page":"Internals","title":"PredictMD.set_feature_contrasts!","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.set_feature_contrasts!-Tuple{PredictMD.MutableDataFrame2DecisionTreeTransformer, PredictMDAPI.AbstractFeatureContrasts}","page":"Internals","title":"PredictMD.set_feature_contrasts!","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.set_feature_contrasts!-Tuple{PredictMD.MutableDataFrame2RegressionKnetTransformer, PredictMDAPI.AbstractFeatureContrasts}","page":"Internals","title":"PredictMD.set_feature_contrasts!","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.set_feature_contrasts!-Tuple{PredictMD.SimplePipeline, PredictMDAPI.AbstractFeatureContrasts}","page":"Internals","title":"PredictMD.set_feature_contrasts!","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.set_max_epochs!-Tuple{PredictMD.KnetModel, Integer}","page":"Internals","title":"PredictMD.set_max_epochs!","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.set_max_epochs!-Tuple{PredictMD.SimplePipeline, Integer}","page":"Internals","title":"PredictMD.set_max_epochs!","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.shuffle_rows!-Tuple{DataFrames.AbstractDataFrame}","page":"Internals","title":"PredictMD.shuffle_rows!","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.shuffle_rows!-Tuple{Random.AbstractRNG, DataFrames.AbstractDataFrame}","page":"Internals","title":"PredictMD.shuffle_rows!","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.simple_linear_regression-Tuple{AbstractVector{T} where T, AbstractVector{T} where T}","page":"Internals","title":"PredictMD.simple_linear_regression","text":"simple_linear_regression(x::AbstractVector, y::AbstractVector)\n\nSimple linear regression - given a set of two-dimensional points (x, y), use the ordinary least squares method to find the best fit line of the form y = a + b*x (where a and b are real numbers) and return the tuple (a, b).\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.simple_moving_average-Union{Tuple{T}, Tuple{AbstractVector{T} where T, Integer}} where T","page":"Internals","title":"PredictMD.simple_moving_average","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.single_labeldataframeknetregression-Tuple{AbstractVector{T} where T, Symbol}","page":"Internals","title":"PredictMD.single_labeldataframeknetregression","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.single_labeldataframeknetregression_Knet-Tuple{AbstractVector{T} where T, Symbol}","page":"Internals","title":"PredictMD.single_labeldataframeknetregression_Knet","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.single_labeldataframelinearregression-Tuple{AbstractVector{T} where T, Symbol}","page":"Internals","title":"PredictMD.single_labeldataframelinearregression","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.single_labeldataframelinearregression_GLM-Tuple{AbstractVector{T} where T, Symbol}","page":"Internals","title":"PredictMD.single_labeldataframelinearregression_GLM","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.single_labeldataframerandomforestregression-Tuple{AbstractVector{T} where T, Symbol}","page":"Internals","title":"PredictMD.single_labeldataframerandomforestregression","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.single_labeldataframerandomforestregression_DecisionTree-Tuple{AbstractVector{T} where T, Symbol}","page":"Internals","title":"PredictMD.single_labeldataframerandomforestregression_DecisionTree","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.single_labeldataframesvmregression-Tuple{AbstractVector{T} where T, Symbol}","page":"Internals","title":"PredictMD.single_labeldataframesvmregression","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.single_labeldataframesvmregression_LIBSVM-Tuple{AbstractVector{T} where T, Symbol}","page":"Internals","title":"PredictMD.single_labeldataframesvmregression_LIBSVM","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.single_labelmulticlassdataframeknetclassifier-Tuple{AbstractVector{T} where T, Symbol, AbstractVector{T} where T}","page":"Internals","title":"PredictMD.single_labelmulticlassdataframeknetclassifier","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.single_labelmulticlassdataframeknetclassifier_Knet-Tuple{AbstractVector{T} where T, Symbol, AbstractVector{T} where T}","page":"Internals","title":"PredictMD.single_labelmulticlassdataframeknetclassifier_Knet","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.single_labelmulticlassdataframerandomforestclassifier-Tuple{AbstractVector{T} where T, Symbol, AbstractVector{T} where T}","page":"Internals","title":"PredictMD.single_labelmulticlassdataframerandomforestclassifier","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.single_labelmulticlassdataframesvmclassifier-Tuple{AbstractVector{T} where T, Symbol, AbstractVector{T} where T}","page":"Internals","title":"PredictMD.single_labelmulticlassdataframesvmclassifier","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.single_labelmulticlassdataframesvmclassifier_LIBSVM-Tuple{AbstractVector{T} where T, Symbol, AbstractVector{T} where T}","page":"Internals","title":"PredictMD.single_labelmulticlassdataframesvmclassifier_LIBSVM","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.single_labelmulticlassdfrandomforestclassifier_DecisionTree-Tuple{AbstractVector{T} where T, Symbol, AbstractVector{T} where T}","page":"Internals","title":"PredictMD.single_labelmulticlassdfrandomforestclassifier_DecisionTree","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.single_labelprobabilitiestopredictions-Tuple{AbstractDict}","page":"Internals","title":"PredictMD.single_labelprobabilitiestopredictions","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.singlelabelbinaryclassdataframelogisticclassifier-Tuple{AbstractVector{T} where T, Symbol, AbstractVector{T} where T}","page":"Internals","title":"PredictMD.singlelabelbinaryclassdataframelogisticclassifier","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.singlelabelbinaryclassdataframelogisticclassifier_GLM-Tuple{AbstractVector{T} where T, Symbol, AbstractVector{T} where T}","page":"Internals","title":"PredictMD.singlelabelbinaryclassdataframelogisticclassifier_GLM","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.singlelabelbinaryclassificationmetrics-Tuple{AbstractVector{PredictMDAPI.AbstractFittable}, DataFrames.AbstractDataFrame, DataFrames.AbstractDataFrame, Symbol, AbstractString}","page":"Internals","title":"PredictMD.singlelabelbinaryclassificationmetrics","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.singlelabelbinaryclassificationmetrics-Tuple{PredictMDAPI.AbstractFittable, DataFrames.AbstractDataFrame, DataFrames.AbstractDataFrame, Symbol, AbstractString}","page":"Internals","title":"PredictMD.singlelabelbinaryclassificationmetrics","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.singlelabelbinaryclassificationmetrics_resultdict-Tuple{PredictMDAPI.AbstractFittable, DataFrames.AbstractDataFrame, DataFrames.AbstractDataFrame, Symbol, AbstractString}","page":"Internals","title":"PredictMD.singlelabelbinaryclassificationmetrics_resultdict","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.singlelabelbinaryclassificationmetrics_tunableparam-Tuple{AbstractDict}","page":"Internals","title":"PredictMD.singlelabelbinaryclassificationmetrics_tunableparam","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.singlelabelbinaryyscore-Tuple{AbstractDict, AbstractString}","page":"Internals","title":"PredictMD.singlelabelbinaryyscore","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.singlelabelbinaryytrue-Tuple{AbstractVector{T} where T, AbstractString}","page":"Internals","title":"PredictMD.singlelabelbinaryytrue","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.singlelabelregressionmetrics-Tuple{AbstractVector{PredictMDAPI.AbstractFittable}, DataFrames.AbstractDataFrame, DataFrames.AbstractDataFrame, Symbol}","page":"Internals","title":"PredictMD.singlelabelregressionmetrics","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.singlelabelregressionmetrics-Tuple{PredictMDAPI.AbstractFittable, DataFrames.AbstractDataFrame, DataFrames.AbstractDataFrame, Symbol}","page":"Internals","title":"PredictMD.singlelabelregressionmetrics","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.singlelabelregressionmetrics_resultdict-Tuple{PredictMDAPI.AbstractFittable, DataFrames.AbstractDataFrame, DataFrames.AbstractDataFrame, Symbol}","page":"Internals","title":"PredictMD.singlelabelregressionmetrics_resultdict","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.singlelabelregressionypred-Tuple{AbstractVector{T} where T}","page":"Internals","title":"PredictMD.singlelabelregressionypred","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.singlelabelregressionytrue-Tuple{AbstractVector{T} where T}","page":"Internals","title":"PredictMD.singlelabelregressionytrue","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.smote-Tuple{DataFrames.AbstractDataFrame, DataFrames.AbstractDataFrame, AbstractVector{Symbol}, Symbol}","page":"Internals","title":"PredictMD.smote","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.smote-Tuple{Random.AbstractRNG, DataFrames.AbstractDataFrame, DataFrames.AbstractDataFrame, AbstractVector{Symbol}, Symbol}","page":"Internals","title":"PredictMD.smote","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.specificity-Tuple{MLBase.ROCNums}","page":"Internals","title":"PredictMD.specificity","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.split_data-Tuple{DataFrames.AbstractDataFrame, DataFrames.AbstractDataFrame, Real}","page":"Internals","title":"PredictMD.split_data","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.split_data-Tuple{Random.AbstractRNG, DataFrames.AbstractDataFrame, DataFrames.AbstractDataFrame, Real}","page":"Internals","title":"PredictMD.split_data","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.transform","page":"Internals","title":"PredictMD.transform","text":"\n\n\n\n","category":"function"},{"location":"library/internals/#PredictMD.transform","page":"Internals","title":"PredictMD.transform","text":"\n\n\n\n","category":"function"},{"location":"library/internals/#PredictMD.transform-Tuple{PredictMD.ImmutableDataFrame2GLMSingleLabelBinaryClassTransformer, AbstractString}","page":"Internals","title":"PredictMD.transform","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.transform-Tuple{PredictMD.ImmutableDataFrame2GLMSingleLabelBinaryClassTransformer, DataFrames.AbstractDataFrame, DataFrames.AbstractDataFrame}","page":"Internals","title":"PredictMD.transform","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.transform-Tuple{PredictMD.ImmutableDataFrame2GLMSingleLabelBinaryClassTransformer, DataFrames.AbstractDataFrame}","page":"Internals","title":"PredictMD.transform","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.transform-Tuple{PredictMD.ImmutableFeatureArrayTransposerTransformer, AbstractMatrix{T} where T, AbstractArray}","page":"Internals","title":"PredictMD.transform","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.transform-Tuple{PredictMD.ImmutableFeatureArrayTransposerTransformer, AbstractMatrix{T} where T}","page":"Internals","title":"PredictMD.transform","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.transform-Tuple{PredictMD.MutableDataFrame2ClassificationKnetTransformer, AbstractString}","page":"Internals","title":"PredictMD.transform","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.transform-Tuple{PredictMD.MutableDataFrame2ClassificationKnetTransformer, DataFrames.AbstractDataFrame}","page":"Internals","title":"PredictMD.transform","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.transform-Tuple{PredictMD.MutableDataFrame2DecisionTreeTransformer, DataFrames.AbstractDataFrame, DataFrames.AbstractDataFrame}","page":"Internals","title":"PredictMD.transform","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.transform-Tuple{PredictMD.MutableDataFrame2DecisionTreeTransformer, DataFrames.AbstractDataFrame}","page":"Internals","title":"PredictMD.transform","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.transform-Tuple{PredictMD.MutableDataFrame2RegressionKnetTransformer, DataFrames.AbstractDataFrame, Vararg{Any, N} where N}","page":"Internals","title":"PredictMD.transform","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.transform_columns!","page":"Internals","title":"PredictMD.transform_columns!","text":"\n\n\n\n","category":"function"},{"location":"library/internals/#PredictMD.trapz","page":"Internals","title":"PredictMD.trapz","text":"trapz(x, y)\n\nCompute the area under the curve of 2-dimensional points (x, y) using the trapezoidal method.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/#PredictMD.true_negative_rate-Tuple{MLBase.ROCNums}","page":"Internals","title":"PredictMD.true_negative_rate","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.true_positive_rate-Tuple{MLBase.ROCNums}","page":"Internals","title":"PredictMD.true_positive_rate","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.tuplify","page":"Internals","title":"PredictMD.tuplify","text":"\n\n\n\n","category":"function"},{"location":"library/internals/#PredictMD.version-Tuple{}","page":"Internals","title":"PredictMD.version","text":"version()::VersionNumber\n\nReturn the version number of PredictMD.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.Cleaning.ccs_onehot_names","page":"Internals","title":"PredictMD.Cleaning.ccs_onehot_names","text":"Given a dataframe, return the column names corresponding to CCS \"one-hot\" columns.\n\nExamples\n\nimport CSVFiles\nimport FileIO\nimport PredictMD\n\ndf = DataFrames.DataFrame(\n    FileIO.load(\n        MY_CSV_FILE_NAME;\n        type_detect_rows = 30_000,\n        )\n    )\n\n@info(PredictMD.Cleaning.ccs_onehot_names(df))\n@info(PredictMD.Cleaning.ccs_onehot_names(df, \"ccs_onehot_\"))\n\n\n\n\n\n","category":"function"},{"location":"library/internals/#PredictMD.Cleaning.clean_hcup_nis_csv_icd9-Tuple{AbstractVector{var\"#s1556\"} where var\"#s1556\"<:AbstractString, AbstractVector{var\"#s1557\"} where var\"#s1557\"<:AbstractString, AbstractString}","page":"Internals","title":"PredictMD.Cleaning.clean_hcup_nis_csv_icd9","text":"Given a single ICD 9 code, import the relevant patients from the Health Care Utilization Project (HCUP) National Inpatient Sample (NIS) database.\n\nExamples:\n\nimport CSVFiles\nimport FileIO\nimport PredictMD\n\nicd_code_list = [\"8841\"]\nicd_code_type=:procedure\ninput_file_name_list = [\n    \"./data/nis_2012_core.csv\",\n    \"./data/nis_2013_core.csv\",\n    \"./data/nis_2014_core.csv\",\n    ]\noutput_file_name = \"./output/hcup_nis_pr_8841.csv\"\n\nPredictMD.Cleaning.clean_hcup_nis_csv_icd9(\n    icd_code_list,\n    input_file_name_list,\n    output_file_name;\n    icd_code_type=icd_code_type,\n    rows_for_type_detect = 30_000,\n    )\n\ndf = DataFrames.DataFrame(\n    FileIO.load(\n        output_file_name;\n        type_detect_rows = 30_000,\n        )\n    )\n\n@info(PredictMD.Cleaning.ccs_onehot_names(df))\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.Cleaning.column_names_with_prefix-Tuple{DataFrames.AbstractDataFrame, AbstractString}","page":"Internals","title":"PredictMD.Cleaning.column_names_with_prefix","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.Cleaning.symbol_begins_with-Tuple{Symbol, AbstractString}","page":"Internals","title":"PredictMD.Cleaning.symbol_begins_with","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#PredictMD.Cleaning.x_contains_y-Tuple{AbstractString, AbstractVector{var\"#s737\"} where var\"#s737\"<:AbstractString}","page":"Internals","title":"PredictMD.Cleaning.x_contains_y","text":"\n\n\n\n","category":"method"},{"location":"library/internals/#Macros-1","page":"Internals","title":"Macros","text":"","category":"section"},{"location":"library/internals/#","page":"Internals","title":"Internals","text":"Modules = [\n    PredictMD,\n    PredictMD.Cleaning,\n    PredictMD.Compilation,\n    PredictMD.GPU,\n    PredictMD.Server,\n    ]\nOrder = [:macro]","category":"page"},{"location":"library/internals/#Index-1","page":"Internals","title":"Index","text":"","category":"section"},{"location":"library/internals/#","page":"Internals","title":"Internals","text":"","category":"page"},{"location":"examples/cpu_examples/breast_cancer_biopsy/src/02_smote/#","page":"2.  Apply SMOTE algorithm","title":"2.  Apply SMOTE algorithm","text":"EditURL = \"https://github.com/bcbi/PredictMD.jl/blob/master/templates/examples/cpu_examples/breast_cancer_biopsy/src/02_smote.jl\"","category":"page"},{"location":"examples/cpu_examples/breast_cancer_biopsy/src/02_smote/#","page":"2.  Apply SMOTE algorithm","title":"2.  Apply SMOTE algorithm","text":"# This file was generated by PredictMD version 0.34.21\n# For help, please visit https://predictmd.net\n\nusing PredictMDExtra\nPredictMDExtra.import_all()\n\nusing PredictMD\nPredictMD.import_all()\n\n\n\n### Begin project-specific settings\n\nDIRECTORY_CONTAINING_THIS_FILE = @__DIR__\nPROJECT_DIRECTORY = dirname(\n    joinpath(splitpath(DIRECTORY_CONTAINING_THIS_FILE)...)\n    )\nPROJECT_OUTPUT_DIRECTORY = joinpath(\n    PROJECT_DIRECTORY,\n    \"output\",\n    )\nmkpath(PROJECT_OUTPUT_DIRECTORY)\nmkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, \"data\"))\nmkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, \"models\"))\nmkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, \"plots\"))\n\n\n\n### End project-specific settings\n\n### Begin SMOTE class-balancing code\n\nRandom.seed!(999)\n\ntrainingandtuning_features_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"trainingandtuning_features_df.csv\",\n    )\ntrainingandtuning_labels_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"trainingandtuning_labels_df.csv\",\n    )\ntesting_features_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"testing_features_df.csv\",\n    )\ntesting_labels_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"testing_labels_df.csv\",\n    )\ntraining_features_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"training_features_df.csv\",\n    )\ntraining_labels_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"training_labels_df.csv\",\n    )\ntuning_features_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"tuning_features_df.csv\",\n    )\ntuning_labels_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"tuning_labels_df.csv\",\n    )\ntrainingandtuning_features_df = DataFrames.DataFrame(\n    FileIO.load(\n        trainingandtuning_features_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntrainingandtuning_labels_df = DataFrames.DataFrame(\n    FileIO.load(\n        trainingandtuning_labels_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntesting_features_df = DataFrames.DataFrame(\n    FileIO.load(\n        testing_features_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntesting_labels_df = DataFrames.DataFrame(\n    FileIO.load(\n        testing_labels_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntraining_features_df = DataFrames.DataFrame(\n    FileIO.load(\n        training_features_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntraining_labels_df = DataFrames.DataFrame(\n    FileIO.load(\n        training_labels_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntuning_features_df = DataFrames.DataFrame(\n    FileIO.load(\n        tuning_features_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntuning_labels_df = DataFrames.DataFrame(\n    FileIO.load(\n        tuning_labels_df_filename;\n        type_detect_rows = 100,\n        )\n    )\n\ncategorical_feature_names_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"categorical_feature_names.jld2\",\n    )\ncontinuous_feature_names_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"continuous_feature_names.jld2\",\n    )\ncategorical_feature_names = FileIO.load(\n    categorical_feature_names_filename,\n    \"categorical_feature_names\",\n    )\ncontinuous_feature_names = FileIO.load(\n    continuous_feature_names_filename,\n    \"continuous_feature_names\",\n    )\nfeature_names = vcat(categorical_feature_names, continuous_feature_names)\n\nsingle_label_name = :Class\nnegative_class = \"benign\"\npositive_class = \"malignant\"\nsingle_label_levels = [negative_class, positive_class]\n\ncategorical_label_names = Symbol[single_label_name]\ncontinuous_label_names = Symbol[]\nlabel_names = vcat(categorical_label_names, continuous_label_names)\n\nDataFrames.describe(training_labels_df[single_label_name])\nshow(StatsBase.countmap(training_labels_df[single_label_name]))\n\nmajorityclass = \"benign\"\nminorityclass = \"malignant\"\n\n(smoted_training_features_df, smoted_training_labels_df,) = PredictMD.smote(\n    training_features_df,\n    training_labels_df,\n    feature_names,\n    single_label_name;\n    majorityclass = majorityclass,\n    minorityclass = minorityclass,\n    pct_over = 100,\n    minority_to_majority_ratio = 1.0,\n    k = 5,\n    )\n\nPredictMD.check_column_types(\n    smoted_training_features_df;\n    categorical_feature_names = categorical_feature_names,\n    continuous_feature_names = continuous_feature_names,\n    categorical_label_names = categorical_label_names,\n    continuous_label_names = continuous_label_names,\n    )\nPredictMD.check_column_types(\n    smoted_training_labels_df;\n    categorical_feature_names = categorical_feature_names,\n    continuous_feature_names = continuous_feature_names,\n    categorical_label_names = categorical_label_names,\n    continuous_label_names = continuous_label_names,\n    )\n\n\n\nDataFrames.describe(smoted_training_labels_df[single_label_name])\nshow(StatsBase.countmap(smoted_training_labels_df[single_label_name]))\n\nsmoted_training_features_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"smoted_training_features_df.csv\",\n    )\nsmoted_training_labels_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"smoted_training_labels_df.csv\",\n    )\nFileIO.save(smoted_training_features_df_filename, smoted_training_features_df)\nFileIO.save(smoted_training_labels_df_filename, smoted_training_labels_df)\n\n### End SMOTE class-balancing code\n\n\n\n# This file was generated by PredictMD version 0.34.21\n# For help, please visit https://predictmd.net","category":"page"},{"location":"examples/cpu_examples/breast_cancer_biopsy/src/02_smote/#","page":"2.  Apply SMOTE algorithm","title":"2.  Apply SMOTE algorithm","text":"","category":"page"},{"location":"examples/cpu_examples/breast_cancer_biopsy/src/02_smote/#","page":"2.  Apply SMOTE algorithm","title":"2.  Apply SMOTE algorithm","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/cpu_examples/breast_cancer_biopsy/src/04_random_forest_classifier/#","page":"4.  Random forest classifier","title":"4.  Random forest classifier","text":"EditURL = \"https://github.com/bcbi/PredictMD.jl/blob/master/templates/examples/cpu_examples/breast_cancer_biopsy/src/04_random_forest_classifier.jl\"","category":"page"},{"location":"examples/cpu_examples/breast_cancer_biopsy/src/04_random_forest_classifier/#","page":"4.  Random forest classifier","title":"4.  Random forest classifier","text":"# This file was generated by PredictMD version 0.34.21\n# For help, please visit https://predictmd.net\n\nusing PredictMDExtra\nPredictMDExtra.import_all()\n\nusing PredictMD\nPredictMD.import_all()\n\n\n\n### Begin project-specific settings\n\nDIRECTORY_CONTAINING_THIS_FILE = @__DIR__\nPROJECT_DIRECTORY = dirname(\n    joinpath(splitpath(DIRECTORY_CONTAINING_THIS_FILE)...)\n    )\nPROJECT_OUTPUT_DIRECTORY = joinpath(\n    PROJECT_DIRECTORY,\n    \"output\",\n    )\nmkpath(PROJECT_OUTPUT_DIRECTORY)\nmkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, \"data\"))\nmkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, \"models\"))\nmkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, \"plots\"))\n\n\n\n### End project-specific settings\n\n### Begin random forest classifier code\n\nRandom.seed!(999)\n\ntrainingandtuning_features_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"trainingandtuning_features_df.csv\",\n    )\ntrainingandtuning_labels_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"trainingandtuning_labels_df.csv\",\n    )\ntesting_features_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"testing_features_df.csv\",\n    )\ntesting_labels_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"testing_labels_df.csv\",\n    )\ntraining_features_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"training_features_df.csv\",\n    )\ntraining_labels_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"training_labels_df.csv\",\n    )\ntuning_features_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"tuning_features_df.csv\",\n    )\ntuning_labels_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"tuning_labels_df.csv\",\n    )\ntrainingandtuning_features_df = DataFrames.DataFrame(\n    FileIO.load(\n        trainingandtuning_features_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntrainingandtuning_labels_df = DataFrames.DataFrame(\n    FileIO.load(\n        trainingandtuning_labels_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntesting_features_df = DataFrames.DataFrame(\n    FileIO.load(\n        testing_features_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntesting_labels_df = DataFrames.DataFrame(\n    FileIO.load(\n        testing_labels_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntraining_features_df = DataFrames.DataFrame(\n    FileIO.load(\n        training_features_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntraining_labels_df = DataFrames.DataFrame(\n    FileIO.load(\n        training_labels_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntuning_features_df = DataFrames.DataFrame(\n    FileIO.load(\n        tuning_features_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntuning_labels_df = DataFrames.DataFrame(\n    FileIO.load(\n        tuning_labels_df_filename;\n        type_detect_rows = 100,\n        )\n    )\n\nsmoted_training_features_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"smoted_training_features_df.csv\",\n    )\nsmoted_training_labels_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"smoted_training_labels_df.csv\",\n    )\nsmoted_training_features_df = DataFrames.DataFrame(\n    FileIO.load(\n        smoted_training_features_df_filename;\n        type_detect_rows = 100,\n        )\n    )\nsmoted_training_labels_df = DataFrames.DataFrame(\n    FileIO.load(\n        smoted_training_labels_df_filename;\n        type_detect_rows = 100,\n        )\n    )\n\ncategorical_feature_names_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"categorical_feature_names.jld2\",\n    )\ncontinuous_feature_names_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"continuous_feature_names.jld2\",\n    )\ncategorical_feature_names = FileIO.load(\n    categorical_feature_names_filename,\n    \"categorical_feature_names\",\n    )\ncontinuous_feature_names = FileIO.load(\n    continuous_feature_names_filename,\n    \"continuous_feature_names\",\n    )\nfeature_names = vcat(categorical_feature_names, continuous_feature_names)\n\nsingle_label_name = :Class\nnegative_class = \"benign\"\npositive_class = \"malignant\"\nsingle_label_levels = [negative_class, positive_class]\n\ncategorical_label_names = Symbol[single_label_name]\ncontinuous_label_names = Symbol[]\nlabel_names = vcat(categorical_label_names, continuous_label_names)\n\nfeature_contrasts = PredictMD.generate_feature_contrasts(\n    smoted_training_features_df,\n    feature_names,\n    )\n\nrandom_forest_classifier =\n    PredictMD.single_labelmulticlassdataframerandomforestclassifier(\n        feature_names,\n        single_label_name,\n        single_label_levels;\n        nsubfeatures = 4,\n        ntrees = 200,\n        package = :DecisionTree,\n        name = \"Random forest\",\n        feature_contrasts = feature_contrasts,\n        )\n\nPredictMD.fit!(\n    random_forest_classifier,\n    smoted_training_features_df,\n    smoted_training_labels_df,\n    )\n\nrandom_forest_classifier_hist_training =\n    PredictMD.plotsinglelabelbinaryclassifierhistogram(\n        random_forest_classifier,\n        smoted_training_features_df,\n        smoted_training_labels_df,\n        single_label_name,\n        single_label_levels,\n        );\n\n\n\ndisplay(random_forest_classifier_hist_training)\nPredictMD.save_plot(\n    joinpath(\n        PROJECT_OUTPUT_DIRECTORY,\n        \"plots\",\n        \"random_forest_classifier_hist_training.pdf\",\n        ),\n    random_forest_classifier_hist_training,\n    )\n\nrandom_forest_classifier_hist_testing =\n    PredictMD.plotsinglelabelbinaryclassifierhistogram(\n        random_forest_classifier,\n        testing_features_df,\n        testing_labels_df,\n        single_label_name,\n        single_label_levels,\n        );\n\n\n\ndisplay(random_forest_classifier_hist_testing)\nPredictMD.save_plot(\n    joinpath(\n        PROJECT_OUTPUT_DIRECTORY,\n        \"plots\",\n        \"random_forest_classifier_hist_testing.pdf\",\n        ),\n    random_forest_classifier_hist_testing,\n    )\n\nshow(\n    PredictMD.singlelabelbinaryclassificationmetrics(\n        random_forest_classifier,\n        smoted_training_features_df,\n        smoted_training_labels_df,\n        single_label_name,\n        positive_class;\n        sensitivity = 0.95,\n        );\n    allrows = true,\n    allcols = true,\n    splitcols = false,\n    )\n\nshow(\n    PredictMD.singlelabelbinaryclassificationmetrics(\n        random_forest_classifier,\n        testing_features_df,\n        testing_labels_df,\n        single_label_name,\n        positive_class;\n        sensitivity = 0.95,\n        );\n    allrows = true,\n    allcols = true,\n    splitcols = false,\n    )\n\nrandom_forest_classifier_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"models\",\n    \"random_forest_classifier.jld2\",\n    )\n\nPredictMD.save_model(\n    random_forest_classifier_filename,\n    random_forest_classifier,\n    )\n\n\n\n### End random forest classifier code\n\n\n\n# This file was generated by PredictMD version 0.34.21\n# For help, please visit https://predictmd.net","category":"page"},{"location":"examples/cpu_examples/breast_cancer_biopsy/src/04_random_forest_classifier/#","page":"4.  Random forest classifier","title":"4.  Random forest classifier","text":"","category":"page"},{"location":"examples/cpu_examples/breast_cancer_biopsy/src/04_random_forest_classifier/#","page":"4.  Random forest classifier","title":"4.  Random forest classifier","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/cpu_examples/breast_cancer_biopsy/src/08_compare_models/#","page":"8.  Compare models","title":"8.  Compare models","text":"EditURL = \"https://github.com/bcbi/PredictMD.jl/blob/master/templates/examples/cpu_examples/breast_cancer_biopsy/src/08_compare_models.jl\"","category":"page"},{"location":"examples/cpu_examples/breast_cancer_biopsy/src/08_compare_models/#","page":"8.  Compare models","title":"8.  Compare models","text":"# This file was generated by PredictMD version 0.34.21\n# For help, please visit https://predictmd.net\n\nusing PredictMDExtra\nPredictMDExtra.import_all()\n\nusing PredictMD\nPredictMD.import_all()\n\nusing CSVFiles\nusing CategoricalArrays\nusing DataFrames\nusing DecisionTree\nusing Distributions\nusing FileIO\nusing GLM\nusing IterTools\nusing Knet\nusing LIBSVM\nusing LinearAlgebra\nusing PredictMD\nusing PredictMDAPI\nusing PredictMDExtra\nusing RDatasets\nusing Random\nusing StatsModels\nusing Test\nusing Unitful\n\nconst Schema = StatsModels.Schema\n\n\n\n### Begin project-specific settings\n\nDIRECTORY_CONTAINING_THIS_FILE = @__DIR__\nPROJECT_DIRECTORY = dirname(\n    joinpath(splitpath(DIRECTORY_CONTAINING_THIS_FILE)...)\n    )\nPROJECT_OUTPUT_DIRECTORY = joinpath(\n    PROJECT_DIRECTORY,\n    \"output\",\n    )\nmkpath(PROJECT_OUTPUT_DIRECTORY)\nmkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, \"data\"))\nmkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, \"models\"))\nmkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, \"plots\"))\n\n\n\n### End project-specific settings\n\n### Begin model comparison code\n\nKernel = LIBSVM.Kernel\n\nRandom.seed!(999)\n\ntrainingandtuning_features_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"trainingandtuning_features_df.csv\",\n    )\ntrainingandtuning_labels_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"trainingandtuning_labels_df.csv\",\n    )\ntesting_features_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"testing_features_df.csv\",\n    )\ntesting_labels_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"testing_labels_df.csv\",\n    )\ntraining_features_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"training_features_df.csv\",\n    )\ntraining_labels_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"training_labels_df.csv\",\n    )\ntuning_features_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"tuning_features_df.csv\",\n    )\ntuning_labels_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"tuning_labels_df.csv\",\n    )\ntrainingandtuning_features_df = DataFrames.DataFrame(\n    FileIO.load(\n        trainingandtuning_features_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntrainingandtuning_labels_df = DataFrames.DataFrame(\n    FileIO.load(\n        trainingandtuning_labels_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntesting_features_df = DataFrames.DataFrame(\n    FileIO.load(\n        testing_features_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntesting_labels_df = DataFrames.DataFrame(\n    FileIO.load(\n        testing_labels_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntraining_features_df = DataFrames.DataFrame(\n    FileIO.load(\n        training_features_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntraining_labels_df = DataFrames.DataFrame(\n    FileIO.load(\n        training_labels_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntuning_features_df = DataFrames.DataFrame(\n    FileIO.load(\n        tuning_features_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntuning_labels_df = DataFrames.DataFrame(\n    FileIO.load(\n        tuning_labels_df_filename;\n        type_detect_rows = 100,\n        )\n    )\n\nsmoted_training_features_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"smoted_training_features_df.csv\",\n    )\nsmoted_training_labels_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"smoted_training_labels_df.csv\",\n    )\nsmoted_training_features_df = DataFrames.DataFrame(\n    FileIO.load(\n        smoted_training_features_df_filename;\n        type_detect_rows = 100,\n        )\n    )\nsmoted_training_labels_df = DataFrames.DataFrame(\n    FileIO.load(\n        smoted_training_labels_df_filename;\n        type_detect_rows = 100,\n        )\n    )\n\nlogistic_classifier_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"models\",\n    \"logistic_classifier.jld2\",\n    )\nrandom_forest_classifier_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"models\",\n    \"random_forest_classifier.jld2\",\n    )\nc_svc_svm_classifier_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"models\",\n    \"c_svc_svm_classifier.jld2\",\n    )\nnu_svc_svm_classifier_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"models\",\n    \"nu_svc_svm_classifier.jld2\",\n    )\nknet_mlp_classifier_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"models\",\n    \"knet_mlp_classifier.jld2\",\n    )\n\n\n\nlogistic_classifier =\n    PredictMD.load_model(logistic_classifier_filename)\nrandom_forest_classifier =\n    PredictMD.load_model(random_forest_classifier_filename)\nc_svc_svm_classifier =\n    PredictMD.load_model(c_svc_svm_classifier_filename)\nnu_svc_svm_classifier =\n    PredictMD.load_model(nu_svc_svm_classifier_filename)\nknet_mlp_classifier =\n    PredictMD.load_model(knet_mlp_classifier_filename)\n\nPredictMD.parse_functions!(logistic_classifier)\nPredictMD.parse_functions!(random_forest_classifier)\nPredictMD.parse_functions!(c_svc_svm_classifier)\nPredictMD.parse_functions!(nu_svc_svm_classifier)\nPredictMD.parse_functions!(knet_mlp_classifier)\n\n\n\nall_models = PredictMD.AbstractFittable[\n    logistic_classifier,\n    random_forest_classifier,\n    c_svc_svm_classifier,\n    nu_svc_svm_classifier,\n    knet_mlp_classifier,\n    ]\n\nsingle_label_name = :Class\nnegative_class = \"benign\"\npositive_class = \"malignant\"\n\nsingle_label_levels = [negative_class, positive_class]\n\ncategorical_label_names = Symbol[single_label_name]\ncontinuous_label_names = Symbol[]\nlabel_names = vcat(categorical_label_names, continuous_label_names)\n\nprintln(\n    string(\n        \"Single label binary classification metrics, training set, \",\n        \"fix sensitivity\",\n        )\n    )\nshow(\n    PredictMD.singlelabelbinaryclassificationmetrics(\n        all_models,\n        training_features_df,\n        training_labels_df,\n        single_label_name,\n        positive_class;\n        sensitivity = 0.95,\n        );\n    allrows = true,\n    allcols = true,\n    splitcols = false,\n    )\n\nprintln(\n    string(\n        \"Single label binary classification metrics, training set, \",\n        \"fix specificity\",\n        )\n    )\nshow(\n    PredictMD.singlelabelbinaryclassificationmetrics(\n        all_models,\n        training_features_df,\n        training_labels_df,\n        single_label_name,\n        positive_class;\n        specificity = 0.95,\n        );\n    allrows = true,\n    allcols = true,\n    splitcols = false,\n    )\n\nprintln(\n    string(\n        \"Single label binary classification metrics, training set, \",\n        \"maximize F1 score\",\n        )\n    )\nshow(\n    PredictMD.singlelabelbinaryclassificationmetrics(\n        all_models,\n        training_features_df,\n        training_labels_df,\n        single_label_name,\n        positive_class;\n        maximize = :f1score,\n        );\n    allrows = true,\n    allcols = true,\n    splitcols = false,\n    )\n\nprintln(\n    string(\n        \"Single label binary classification metrics, training set, \",\n        \"maximize Cohen's kappa\",\n        )\n    )\nshow(\n    PredictMD.singlelabelbinaryclassificationmetrics(\n        all_models,\n        training_features_df,\n        training_labels_df,\n        single_label_name,\n        positive_class;\n        maximize = :cohen_kappa,\n        );\n    allrows = true,\n    allcols = true,\n    splitcols = false,\n    )\n\nprintln(\n    string(\n        \"Single label binary classification metrics, testing set, \",\n        \"fix sensitivity\",\n        )\n    )\nshow(\n    PredictMD.singlelabelbinaryclassificationmetrics(\n        all_models,\n        testing_features_df,\n        testing_labels_df,\n        single_label_name,\n        positive_class;\n        sensitivity = 0.95,\n        );\n    allrows = true,\n    allcols = true,\n    splitcols = false,\n    )\n\n\n\nprintln(\n    string(\n        \"Single label binary classification metrics, testing set, \",\n        \"fix specificity\",\n        )\n    )\nshow(\n    PredictMD.singlelabelbinaryclassificationmetrics(\n        all_models,\n        testing_features_df,\n        testing_labels_df,\n        single_label_name,\n        positive_class;\n        specificity = 0.95,\n        );\n    allrows = true,\n    allcols = true,\n    splitcols = false,\n    )\n\nprintln(\n    string(\n        \"Single label binary classification metrics, testing set, \",\n        \"maximize F1 score\",\n        )\n    )\nshow(\n    PredictMD.singlelabelbinaryclassificationmetrics(\n        all_models,\n        testing_features_df,\n        testing_labels_df,\n        single_label_name,\n        positive_class;\n        maximize = :f1score,\n        );\n    allrows = true,\n    allcols = true,\n    splitcols = false,\n    )\n\nprintln(\n    string(\n        \"Single label binary classification metrics, testing set, \",\n        \"maximize Cohen's kappa\",\n        )\n    )\nshow(\n    PredictMD.singlelabelbinaryclassificationmetrics(\n        all_models,\n        testing_features_df,\n        testing_labels_df,\n        single_label_name,\n        positive_class;\n        maximize = :cohen_kappa,\n        );\n    allrows = true,\n    allcols = true,\n    splitcols = false,\n    )\n\nrocplottesting = PredictMD.plotroccurve(\n    all_models,\n    testing_features_df,\n    testing_labels_df,\n    single_label_name,\n    positive_class,\n    );\n\n\n\ndisplay(rocplottesting)\nPredictMD.save_plot(\n    joinpath(\n        PROJECT_OUTPUT_DIRECTORY,\n        \"plots\",\n        \"rocplottesting.pdf\",\n        ),\n    rocplottesting,\n    )\n\nprplottesting = PredictMD.plotprcurve(\n    all_models,\n    testing_features_df,\n    testing_labels_df,\n    single_label_name,\n    positive_class,\n    );\n\n\n\ndisplay(prplottesting)\nPredictMD.save_plot(\n    joinpath(\n        PROJECT_OUTPUT_DIRECTORY,\n        \"plots\",\n        \"prplottesting.pdf\",\n        ),\n    prplottesting,\n    )\n\n### End model comparison code\n\n\n\n# This file was generated by PredictMD version 0.34.21\n# For help, please visit https://predictmd.net","category":"page"},{"location":"examples/cpu_examples/breast_cancer_biopsy/src/08_compare_models/#","page":"8.  Compare models","title":"8.  Compare models","text":"","category":"page"},{"location":"examples/cpu_examples/breast_cancer_biopsy/src/08_compare_models/#","page":"8.  Compare models","title":"8.  Compare models","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/cpu_examples/boston_housing/src/05_compare_models/#","page":"5.  Compare models","title":"5.  Compare models","text":"EditURL = \"https://github.com/bcbi/PredictMD.jl/blob/master/templates/examples/cpu_examples/boston_housing/src/05_compare_models.jl\"","category":"page"},{"location":"examples/cpu_examples/boston_housing/src/05_compare_models/#","page":"5.  Compare models","title":"5.  Compare models","text":"# This file was generated by PredictMD version 0.34.21\n# For help, please visit https://predictmd.net\n\nusing PredictMDExtra\nPredictMDExtra.import_all()\n\nusing PredictMD\nPredictMD.import_all()\n\nusing CSVFiles\nusing CategoricalArrays\nusing DataFrames\nusing DecisionTree\nusing Distributions\nusing FileIO\nusing GLM\nusing IterTools\nusing Knet\nusing LIBSVM\nusing LinearAlgebra\nusing PredictMD\nusing PredictMDAPI\nusing PredictMDExtra\nusing RDatasets\nusing Random\nusing StatsModels\nusing Test\nusing Unitful\n\nconst Schema = StatsModels.Schema\n\n\n\n### Begin project-specific settings\n\nDIRECTORY_CONTAINING_THIS_FILE = @__DIR__\nPROJECT_DIRECTORY = dirname(\n    joinpath(splitpath(DIRECTORY_CONTAINING_THIS_FILE)...)\n    )\nPROJECT_OUTPUT_DIRECTORY = joinpath(\n    PROJECT_DIRECTORY,\n    \"output\",\n    )\nmkpath(PROJECT_OUTPUT_DIRECTORY)\nmkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, \"data\"))\nmkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, \"models\"))\nmkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, \"plots\"))\n\n\n\n### End project-specific settings\n\n### Begin model comparison code\n\nRandom.seed!(999)\n\ntrainingandtuning_features_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"trainingandtuning_features_df.csv\",\n    )\ntrainingandtuning_labels_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"trainingandtuning_labels_df.csv\",\n    )\ntesting_features_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"testing_features_df.csv\",\n    )\ntesting_labels_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"testing_labels_df.csv\",\n    )\ntraining_features_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"training_features_df.csv\",\n    )\ntraining_labels_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"training_labels_df.csv\",\n    )\ntuning_features_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"tuning_features_df.csv\",\n    )\ntuning_labels_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"tuning_labels_df.csv\",\n    )\ntrainingandtuning_features_df = DataFrames.DataFrame(\n    FileIO.load(\n        trainingandtuning_features_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntrainingandtuning_labels_df = DataFrames.DataFrame(\n    FileIO.load(\n        trainingandtuning_labels_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntesting_features_df = DataFrames.DataFrame(\n    FileIO.load(\n        testing_features_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntesting_labels_df = DataFrames.DataFrame(\n    FileIO.load(\n        testing_labels_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntraining_features_df = DataFrames.DataFrame(\n    FileIO.load(\n        training_features_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntraining_labels_df = DataFrames.DataFrame(\n    FileIO.load(\n        training_labels_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntuning_features_df = DataFrames.DataFrame(\n    FileIO.load(\n        tuning_features_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntuning_labels_df = DataFrames.DataFrame(\n    FileIO.load(\n        tuning_labels_df_filename;\n        type_detect_rows = 100,\n        )\n    )\n\nlinear_regression_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"models\",\n    \"linear_regression.jld2\",\n    )\nrandom_forest_regression_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"models\",\n    \"random_forest_regression.jld2\",\n    )\nknet_mlp_regression_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"models\",\n    \"knet_mlp_regression.jld2\",\n    )\n\n\n\nlinear_regression =\n    PredictMD.load_model(linear_regression_filename)\nrandom_forest_regression =\n    PredictMD.load_model(random_forest_regression_filename)\nknet_mlp_regression =\n    PredictMD.load_model(knet_mlp_regression_filename)\n\nPredictMD.parse_functions!(linear_regression)\nPredictMD.parse_functions!(random_forest_regression)\nPredictMD.parse_functions!(knet_mlp_regression)\n\n\n\nall_models = PredictMD.AbstractFittable[\n    linear_regression,\n    random_forest_regression,\n    knet_mlp_regression,\n    ]\n\nsingle_label_name = :MedV\n\ncontinuous_label_names = Symbol[single_label_name]\ncategorical_label_names = Symbol[]\nlabel_names = vcat(categorical_label_names, continuous_label_names)\n\nprintln(\"Single label regression metrics, training set: \")\nshow(\n    PredictMD.singlelabelregressionmetrics(\n        all_models,\n        training_features_df,\n        training_labels_df,\n        single_label_name,\n        );\n    allrows = true,\n    allcols = true,\n    splitcols = false,\n    )\n\nprintln(\"Single label regression metrics, testing set: \")\nshow(\n    PredictMD.singlelabelregressionmetrics(\n        all_models,\n        testing_features_df,\n        testing_labels_df,\n        single_label_name,\n        );\n    allrows = true,\n    allcols = true,\n    splitcols = false,\n    )\n\n### End model comparison code\n\n\n\n\n\n# This file was generated by PredictMD version 0.34.21\n# For help, please visit https://predictmd.net","category":"page"},{"location":"examples/cpu_examples/boston_housing/src/05_compare_models/#","page":"5.  Compare models","title":"5.  Compare models","text":"","category":"page"},{"location":"examples/cpu_examples/boston_housing/src/05_compare_models/#","page":"5.  Compare models","title":"5.  Compare models","text":"This page was generated using Literate.jl.","category":"page"},{"location":"docker_image/#docker_image-1","page":"Docker image","title":"Docker image","text":"","category":"section"},{"location":"docker_image/#","page":"Docker image","title":"Docker image","text":"You can use the PredictMD Docker image for easy installation of PredictMD and all of its dependencies. Download and start the container by running the following line:","category":"page"},{"location":"docker_image/#","page":"Docker image","title":"Docker image","text":"docker run --name predictmd -it dilumaluthge/predictmd /bin/bash","category":"page"},{"location":"docker_image/#","page":"Docker image","title":"Docker image","text":"Once you are inside the container, you can start Julia by running the following line:","category":"page"},{"location":"docker_image/#","page":"Docker image","title":"Docker image","text":"julia","category":"page"},{"location":"docker_image/#","page":"Docker image","title":"Docker image","text":"In Julia, run the following line to load PredictMD:","category":"page"},{"location":"docker_image/#","page":"Docker image","title":"Docker image","text":"import PredictMDFull","category":"page"},{"location":"docker_image/#","page":"Docker image","title":"Docker image","text":"You can run the test suite by running the following four lines in Julia:","category":"page"},{"location":"docker_image/#","page":"Docker image","title":"Docker image","text":"import Pkg\nENV[\"PREDICTMD_TEST_GROUP\"] = \"all\"\nPkg.test(\"PredictMDExtra\")\nPkg.test(\"PredictMDFull\")\nPkg.test(\"PredictMD\")","category":"page"},{"location":"docker_image/#","page":"Docker image","title":"Docker image","text":"After you have exited the container, you can return to it by running the following line:","category":"page"},{"location":"docker_image/#","page":"Docker image","title":"Docker image","text":"docker start -ai predictmd","category":"page"},{"location":"docker_image/#","page":"Docker image","title":"Docker image","text":"To delete your container, run the following line:","category":"page"},{"location":"docker_image/#","page":"Docker image","title":"Docker image","text":"docker container rm -f predictmd","category":"page"},{"location":"docker_image/#","page":"Docker image","title":"Docker image","text":"To also delete the downloaded image, run the following line:","category":"page"},{"location":"docker_image/#","page":"Docker image","title":"Docker image","text":"docker image rm -f dilumaluthge/predictmd","category":"page"},{"location":"examples/cpu_examples/boston_housing/README/#Boston-housing-regression-1","page":"Boston housing regression","title":"Boston housing regression","text":"","category":"section"},{"location":"examples/cpu_examples/boston_housing/src/06_get_model_output/#","page":"6.  Directly access model output","title":"6.  Directly access model output","text":"EditURL = \"https://github.com/bcbi/PredictMD.jl/blob/master/templates/examples/cpu_examples/boston_housing/src/06_get_model_output.jl\"","category":"page"},{"location":"examples/cpu_examples/boston_housing/src/06_get_model_output/#","page":"6.  Directly access model output","title":"6.  Directly access model output","text":"# This file was generated by PredictMD version 0.34.21\n# For help, please visit https://predictmd.net\n\nusing PredictMDExtra\nPredictMDExtra.import_all()\n\nusing PredictMD\nPredictMD.import_all()\n\nusing CSVFiles\nusing CategoricalArrays\nusing DataFrames\nusing DecisionTree\nusing Distributions\nusing FileIO\nusing GLM\nusing IterTools\nusing Knet\nusing LIBSVM\nusing LinearAlgebra\nusing PredictMD\nusing PredictMDAPI\nusing PredictMDExtra\nusing RDatasets\nusing Random\nusing StatsModels\nusing Test\nusing Unitful\n\nconst Schema = StatsModels.Schema\n\n\n\n### Begin project-specific settings\n\nDIRECTORY_CONTAINING_THIS_FILE = @__DIR__\nPROJECT_DIRECTORY = dirname(\n    joinpath(splitpath(DIRECTORY_CONTAINING_THIS_FILE)...)\n    )\nPROJECT_OUTPUT_DIRECTORY = joinpath(\n    PROJECT_DIRECTORY,\n    \"output\",\n    )\nmkpath(PROJECT_OUTPUT_DIRECTORY)\nmkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, \"data\"))\nmkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, \"models\"))\nmkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, \"plots\"))\n\n\n\n### End project-specific settings\n\n### Begin model output code\n\nRandom.seed!(999)\n\ntrainingandtuning_features_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"trainingandtuning_features_df.csv\",\n    )\ntrainingandtuning_labels_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"trainingandtuning_labels_df.csv\",\n    )\ntesting_features_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"testing_features_df.csv\",\n    )\ntesting_labels_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"testing_labels_df.csv\",\n    )\ntraining_features_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"training_features_df.csv\",\n    )\ntraining_labels_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"training_labels_df.csv\",\n    )\ntuning_features_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"tuning_features_df.csv\",\n    )\ntuning_labels_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"tuning_labels_df.csv\",\n    )\ntrainingandtuning_features_df = DataFrames.DataFrame(\n    FileIO.load(\n        trainingandtuning_features_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntrainingandtuning_labels_df = DataFrames.DataFrame(\n    FileIO.load(\n        trainingandtuning_labels_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntesting_features_df = DataFrames.DataFrame(\n    FileIO.load(\n        testing_features_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntesting_labels_df = DataFrames.DataFrame(\n    FileIO.load(\n        testing_labels_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntraining_features_df = DataFrames.DataFrame(\n    FileIO.load(\n        training_features_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntraining_labels_df = DataFrames.DataFrame(\n    FileIO.load(\n        training_labels_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntuning_features_df = DataFrames.DataFrame(\n    FileIO.load(\n        tuning_features_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntuning_labels_df = DataFrames.DataFrame(\n    FileIO.load(\n        tuning_labels_df_filename;\n        type_detect_rows = 100,\n        )\n    )\n\nlinear_regression_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"models\",\n    \"linear_regression.jld2\",\n    )\nrandom_forest_regression_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"models\",\n    \"random_forest_regression.jld2\",\n    )\nknet_mlp_regression_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"models\",\n    \"knet_mlp_regression.jld2\",\n    )\n\n\n\nlinear_regression =\n    PredictMD.load_model(linear_regression_filename)\nrandom_forest_regression =\n    PredictMD.load_model(random_forest_regression_filename)\nknet_mlp_regression =\n    PredictMD.load_model(knet_mlp_regression_filename)\n\nPredictMD.parse_functions!(linear_regression)\nPredictMD.parse_functions!(random_forest_regression)\nPredictMD.parse_functions!(knet_mlp_regression)\n\n\n\nPredictMD.predict(linear_regression,training_features_df,)\nPredictMD.predict(random_forest_regression,training_features_df,)\nPredictMD.predict(knet_mlp_regression,training_features_df,)\n\nPredictMD.predict(linear_regression,testing_features_df,)\nPredictMD.predict(random_forest_regression,testing_features_df,)\nPredictMD.predict(knet_mlp_regression,testing_features_df,)\n\n### End model output code\n\n\n\n# This file was generated by PredictMD version 0.34.21\n# For help, please visit https://predictmd.net","category":"page"},{"location":"examples/cpu_examples/boston_housing/src/06_get_model_output/#","page":"6.  Directly access model output","title":"6.  Directly access model output","text":"","category":"page"},{"location":"examples/cpu_examples/boston_housing/src/06_get_model_output/#","page":"6.  Directly access model output","title":"6.  Directly access model output","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/cpu_examples/breast_cancer_biopsy/src/05_c_svc_svm_classifier/#","page":"5.  C-SVC support vector machine classifier","title":"5.  C-SVC support vector machine classifier","text":"EditURL = \"https://github.com/bcbi/PredictMD.jl/blob/master/templates/examples/cpu_examples/breast_cancer_biopsy/src/05_c_svc_svm_classifier.jl\"","category":"page"},{"location":"examples/cpu_examples/breast_cancer_biopsy/src/05_c_svc_svm_classifier/#","page":"5.  C-SVC support vector machine classifier","title":"5.  C-SVC support vector machine classifier","text":"# This file was generated by PredictMD version 0.34.21\n# For help, please visit https://predictmd.net\n\nusing PredictMDExtra\nPredictMDExtra.import_all()\n\nusing PredictMD\nPredictMD.import_all()\n\n\n\n### Begin project-specific settings\n\nDIRECTORY_CONTAINING_THIS_FILE = @__DIR__\nPROJECT_DIRECTORY = dirname(\n    joinpath(splitpath(DIRECTORY_CONTAINING_THIS_FILE)...)\n    )\nPROJECT_OUTPUT_DIRECTORY = joinpath(\n    PROJECT_DIRECTORY,\n    \"output\",\n    )\nmkpath(PROJECT_OUTPUT_DIRECTORY)\nmkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, \"data\"))\nmkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, \"models\"))\nmkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, \"plots\"))\n\n\n\n### End project-specific settings\n\n### Begin C-SVC code\n\nKernel = LIBSVM.Kernel\n\nRandom.seed!(999)\n\ntrainingandtuning_features_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"trainingandtuning_features_df.csv\",\n    )\ntrainingandtuning_labels_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"trainingandtuning_labels_df.csv\",\n    )\ntesting_features_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"testing_features_df.csv\",\n    )\ntesting_labels_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"testing_labels_df.csv\",\n    )\ntraining_features_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"training_features_df.csv\",\n    )\ntraining_labels_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"training_labels_df.csv\",\n    )\ntuning_features_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"tuning_features_df.csv\",\n    )\ntuning_labels_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"tuning_labels_df.csv\",\n    )\ntrainingandtuning_features_df = DataFrames.DataFrame(\n    FileIO.load(\n        trainingandtuning_features_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntrainingandtuning_labels_df = DataFrames.DataFrame(\n    FileIO.load(\n        trainingandtuning_labels_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntesting_features_df = DataFrames.DataFrame(\n    FileIO.load(\n        testing_features_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntesting_labels_df = DataFrames.DataFrame(\n    FileIO.load(\n        testing_labels_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntraining_features_df = DataFrames.DataFrame(\n    FileIO.load(\n        training_features_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntraining_labels_df = DataFrames.DataFrame(\n    FileIO.load(\n        training_labels_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntuning_features_df = DataFrames.DataFrame(\n    FileIO.load(\n        tuning_features_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntuning_labels_df = DataFrames.DataFrame(\n    FileIO.load(\n        tuning_labels_df_filename;\n        type_detect_rows = 100,\n        )\n    )\n\nsmoted_training_features_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"smoted_training_features_df.csv\",\n    )\nsmoted_training_labels_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"smoted_training_labels_df.csv\",\n    )\nsmoted_training_features_df = DataFrames.DataFrame(\n    FileIO.load(\n        smoted_training_features_df_filename;\n        type_detect_rows = 100,\n        )\n    )\nsmoted_training_labels_df = DataFrames.DataFrame(\n    FileIO.load(\n        smoted_training_labels_df_filename;\n        type_detect_rows = 100,\n        )\n    )\n\ncategorical_feature_names_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"categorical_feature_names.jld2\",\n    )\ncontinuous_feature_names_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"continuous_feature_names.jld2\",\n    )\ncategorical_feature_names = FileIO.load(\n    categorical_feature_names_filename,\n    \"categorical_feature_names\",\n    )\ncontinuous_feature_names = FileIO.load(\n    continuous_feature_names_filename,\n    \"continuous_feature_names\",\n    )\nfeature_names = vcat(categorical_feature_names, continuous_feature_names)\n\nsingle_label_name = :Class\nnegative_class = \"benign\"\npositive_class = \"malignant\"\nsingle_label_levels = [negative_class, positive_class]\n\ncategorical_label_names = Symbol[single_label_name]\ncontinuous_label_names = Symbol[]\nlabel_names = vcat(categorical_label_names, continuous_label_names)\n\nfeature_contrasts = PredictMD.generate_feature_contrasts(\n    smoted_training_features_df,\n    feature_names,\n    )\n\n\n\nc_svc_svm_classifier =\n    PredictMD.single_labelmulticlassdataframesvmclassifier(\n        feature_names,\n        single_label_name,\n        single_label_levels;\n        package = :LIBSVM,\n        svmtype = LIBSVM.SVC,\n        name = \"SVM (C-SVC)\",\n        verbose = false,\n        feature_contrasts = feature_contrasts,\n        )\n\nPredictMD.fit!(\n    c_svc_svm_classifier,\n    smoted_training_features_df,\n    smoted_training_labels_df,\n    )\n\nc_svc_svm_classifier_hist_training =\n    PredictMD.plotsinglelabelbinaryclassifierhistogram(\n        c_svc_svm_classifier,\n        smoted_training_features_df,\n        smoted_training_labels_df,\n        single_label_name,\n        single_label_levels,\n        );\n\n\n\ndisplay(c_svc_svm_classifier_hist_training)\nPredictMD.save_plot(\n    joinpath(\n        PROJECT_OUTPUT_DIRECTORY,\n        \"plots\",\n        \"c_svc_svm_classifier_hist_training.pdf\",\n        ),\n    c_svc_svm_classifier_hist_training,\n    )\n\nc_svc_svm_classifier_hist_testing =\n    PredictMD.plotsinglelabelbinaryclassifierhistogram(\n        c_svc_svm_classifier,\n        testing_features_df,\n        testing_labels_df,\n        single_label_name,\n        single_label_levels,\n        );\n\n\n\ndisplay(c_svc_svm_classifier_hist_testing)\nPredictMD.save_plot(\n    joinpath(\n        PROJECT_OUTPUT_DIRECTORY,\n        \"plots\",\n        \"c_svc_svm_classifier_hist_testing.pdf\",\n        ),\n    c_svc_svm_classifier_hist_testing,\n    )\n\nshow(\n    PredictMD.singlelabelbinaryclassificationmetrics(\n        c_svc_svm_classifier,\n        smoted_training_features_df,\n        smoted_training_labels_df,\n        single_label_name,\n        positive_class;\n        sensitivity = 0.95,\n        );\n    allrows = true,\n    allcols = true,\n    splitcols = false,\n    )\n\nshow(\n    PredictMD.singlelabelbinaryclassificationmetrics(\n        c_svc_svm_classifier,\n        testing_features_df,\n        testing_labels_df,\n        single_label_name,\n        positive_class;\n        sensitivity = 0.95,\n        );\n    allrows = true,\n    allcols = true,\n    splitcols = false,\n    )\n\nc_svc_svm_classifier_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"models\",\n    \"c_svc_svm_classifier.jld2\",\n    )\n\nPredictMD.save_model(c_svc_svm_classifier_filename, c_svc_svm_classifier)\n\n### End C-SVC code\n\n\n\n# This file was generated by PredictMD version 0.34.21\n# For help, please visit https://predictmd.net","category":"page"},{"location":"examples/cpu_examples/breast_cancer_biopsy/src/05_c_svc_svm_classifier/#","page":"5.  C-SVC support vector machine classifier","title":"5.  C-SVC support vector machine classifier","text":"","category":"page"},{"location":"examples/cpu_examples/breast_cancer_biopsy/src/05_c_svc_svm_classifier/#","page":"5.  C-SVC support vector machine classifier","title":"5.  C-SVC support vector machine classifier","text":"This page was generated using Literate.jl.","category":"page"},{"location":"requirements_for_plotting/#Requirements-for-plotting-1","page":"Requirements for plotting (optional)","title":"Requirements for plotting","text":"","category":"section"},{"location":"requirements_for_plotting/#","page":"Requirements for plotting (optional)","title":"Requirements for plotting (optional)","text":"There are no requirements in order to run PredictMD–you can train, run, and evaluate models without installing any additional software. However, in order to generate plots (e.g. ROC curves), you need to install LaTeX on your system. See below for instructions on installing LaTeX.","category":"page"},{"location":"requirements_for_plotting/#","page":"Requirements for plotting (optional)","title":"Requirements for plotting (optional)","text":"Once you have installed LaTeX, you can test PredictMD's plotting functionality by running two lines in Julia:","category":"page"},{"location":"requirements_for_plotting/#","page":"Requirements for plotting (optional)","title":"Requirements for plotting (optional)","text":"import Pkg\nPkg.activate(\"PredictMDEnvironment\"; shared = true)\nENV[\"PREDICTMD_TEST_GROUP\"] = \"test-plots\"\nPkg.test(\"PredictMD\")","category":"page"},{"location":"requirements_for_plotting/#","page":"Requirements for plotting (optional)","title":"Requirements for plotting (optional)","text":"If you do not want to install LaTeX on your computer, you can use the Docker image.","category":"page"},{"location":"requirements_for_plotting/#Installing-LaTeX-1","page":"Requirements for plotting (optional)","title":"Installing LaTeX","text":"","category":"section"},{"location":"requirements_for_plotting/#","page":"Requirements for plotting (optional)","title":"Requirements for plotting (optional)","text":"To confirm that LaTeX is installed on your system, open a terminal window and run the following command:","category":"page"},{"location":"requirements_for_plotting/#","page":"Requirements for plotting (optional)","title":"Requirements for plotting (optional)","text":"latex -v","category":"page"},{"location":"requirements_for_plotting/#","page":"Requirements for plotting (optional)","title":"Requirements for plotting (optional)","text":"You should see an output message that looks something like this:","category":"page"},{"location":"requirements_for_plotting/#","page":"Requirements for plotting (optional)","title":"Requirements for plotting (optional)","text":"pdfTeX 3.14159265-2.6-1.40.18 (TeX Live 2017)\nkpathsea version 6.2.3\nCopyright 2017 Han The Thanh (pdfTeX) et al.\nThere is NO warranty.  Redistribution of this software is\ncovered by the terms of both the pdfTeX copyright and\nthe Lesser GNU General Public License.\nFor more information about these matters, see the file\nnamed COPYING and the pdfTeX source.\nPrimary author of pdfTeX: Han The Thanh (pdfTeX) et al.\nCompiled with libpng 1.6.29; using libpng 1.6.29\nCompiled with zlib 1.2.11; using zlib 1.2.11\nCompiled with xpdf version 3.04","category":"page"},{"location":"requirements_for_plotting/#","page":"Requirements for plotting (optional)","title":"Requirements for plotting (optional)","text":"If you receive an error (e.g. \"command not found\"), download and install a TeX distribution from the appropriate link below:","category":"page"},{"location":"requirements_for_plotting/#","page":"Requirements for plotting (optional)","title":"Requirements for plotting (optional)","text":"Windows: https://tug.org/protext/\nmacOS: https://tug.org/mactex/\nGNU/Linux: https://tug.org/texlive/","category":"page"},{"location":"examples/cpu_examples/breast_cancer_biopsy/src/03_logistic_classifier/#","page":"3.  Logistic classifier","title":"3.  Logistic classifier","text":"EditURL = \"https://github.com/bcbi/PredictMD.jl/blob/master/templates/examples/cpu_examples/breast_cancer_biopsy/src/03_logistic_classifier.jl\"","category":"page"},{"location":"examples/cpu_examples/breast_cancer_biopsy/src/03_logistic_classifier/#","page":"3.  Logistic classifier","title":"3.  Logistic classifier","text":"# This file was generated by PredictMD version 0.34.21\n# For help, please visit https://predictmd.net\n\nusing PredictMDExtra\nPredictMDExtra.import_all()\n\nusing PredictMD\nPredictMD.import_all()\n\n\n\n### Begin project-specific settings\n\nDIRECTORY_CONTAINING_THIS_FILE = @__DIR__\nPROJECT_DIRECTORY = dirname(\n    joinpath(splitpath(DIRECTORY_CONTAINING_THIS_FILE)...)\n    )\nPROJECT_OUTPUT_DIRECTORY = joinpath(\n    PROJECT_DIRECTORY,\n    \"output\",\n    )\nmkpath(PROJECT_OUTPUT_DIRECTORY)\nmkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, \"data\"))\nmkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, \"models\"))\nmkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, \"plots\"))\n\n\n\n### End project-specific settings\n\n### Begin logistic classifier code\n\nRandom.seed!(999)\n\ntrainingandtuning_features_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"trainingandtuning_features_df.csv\",\n    )\ntrainingandtuning_labels_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"trainingandtuning_labels_df.csv\",\n    )\ntesting_features_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"testing_features_df.csv\",\n    )\ntesting_labels_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"testing_labels_df.csv\",\n    )\ntraining_features_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"training_features_df.csv\",\n    )\ntraining_labels_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"training_labels_df.csv\",\n    )\ntuning_features_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"tuning_features_df.csv\",\n    )\ntuning_labels_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"tuning_labels_df.csv\",\n    )\ntrainingandtuning_features_df = DataFrames.DataFrame(\n    FileIO.load(\n        trainingandtuning_features_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntrainingandtuning_labels_df = DataFrames.DataFrame(\n    FileIO.load(\n        trainingandtuning_labels_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntesting_features_df = DataFrames.DataFrame(\n    FileIO.load(\n        testing_features_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntesting_labels_df = DataFrames.DataFrame(\n    FileIO.load(\n        testing_labels_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntraining_features_df = DataFrames.DataFrame(\n    FileIO.load(\n        training_features_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntraining_labels_df = DataFrames.DataFrame(\n    FileIO.load(\n        training_labels_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntuning_features_df = DataFrames.DataFrame(\n    FileIO.load(\n        tuning_features_df_filename;\n        type_detect_rows = 100,\n        )\n    )\ntuning_labels_df = DataFrames.DataFrame(\n    FileIO.load(\n        tuning_labels_df_filename;\n        type_detect_rows = 100,\n        )\n    )\n\nsmoted_training_features_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"smoted_training_features_df.csv\",\n    )\nsmoted_training_labels_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"smoted_training_labels_df.csv\",\n    )\nsmoted_training_features_df = DataFrames.DataFrame(\n    FileIO.load(\n        smoted_training_features_df_filename;\n        type_detect_rows = 100,\n        )\n    )\nsmoted_training_labels_df = DataFrames.DataFrame(\n    FileIO.load(\n        smoted_training_labels_df_filename;\n        type_detect_rows = 100,\n        )\n    )\n\ncategorical_feature_names_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"categorical_feature_names.jld2\",\n    )\ncontinuous_feature_names_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"continuous_feature_names.jld2\",\n    )\ncategorical_feature_names = FileIO.load(\n    categorical_feature_names_filename,\n    \"categorical_feature_names\",\n    )\ncontinuous_feature_names = FileIO.load(\n    continuous_feature_names_filename,\n    \"continuous_feature_names\",\n    )\nfeature_names = vcat(categorical_feature_names, continuous_feature_names)\n\nsingle_label_name = :Class\nnegative_class = \"benign\"\npositive_class = \"malignant\"\nsingle_label_levels = [negative_class, positive_class]\n\ncategorical_label_names = Symbol[single_label_name]\ncontinuous_label_names = Symbol[]\nlabel_names = vcat(categorical_label_names, continuous_label_names)\n\nfeature_contrasts = PredictMD.generate_feature_contrasts(\n    smoted_training_features_df,\n    feature_names,\n    )\n\n\n\nshow(\n    PredictMD.linearly_dependent_columns(\n        training_features_df,\n        feature_names,\n        )\n    )\n\n\n\nlogistic_classifier =\n        PredictMD.singlelabelbinaryclassdataframelogisticclassifier(\n        feature_names,\n        single_label_name,\n        single_label_levels;\n        package = :GLM,\n        intercept = true,\n        interactions = 1,\n        name = \"Logistic regression\",\n        )\n\n\n\nPredictMD.fit!(logistic_classifier,\n               smoted_training_features_df,\n               smoted_training_labels_df) # TODO: fix this error\n\nPredictMD.get_underlying(logistic_classifier) # TODO: fix this error\n\nlogistic_hist_training =\n        PredictMD.plotsinglelabelbinaryclassifierhistogram( # TODO: fix this error\n        logistic_classifier,\n        smoted_training_features_df,\n        smoted_training_labels_df,\n        single_label_name,\n        single_label_levels,\n        );\n\n\n\ndisplay(logistic_hist_training)\nPredictMD.save_plot(\n    joinpath(\n        PROJECT_OUTPUT_DIRECTORY,\n        \"plots\",\n        \"logistic_hist_training.pdf\",\n        ),\n    logistic_hist_training,\n    )\n\nlogistic_hist_testing =\n    PredictMD.plotsinglelabelbinaryclassifierhistogram(\n        logistic_classifier,\n        testing_features_df,\n        testing_labels_df,\n        single_label_name,\n        single_label_levels,\n        );\n\n\n\ndisplay(logistic_hist_testing)\nPredictMD.save_plot(\n    joinpath(\n        PROJECT_OUTPUT_DIRECTORY,\n        \"plots\",\n        \"logistic_hist_testing.pdf\",\n        ),\n    logistic_hist_testing,\n    )\n\nshow(\n    PredictMD.singlelabelbinaryclassificationmetrics(\n        logistic_classifier,\n        smoted_training_features_df,\n        smoted_training_labels_df,\n        single_label_name,\n        positive_class;\n        sensitivity = 0.95,\n        );\n    allrows = true,\n    allcols = true,\n    splitcols = false,\n    )\n\nshow(\n    PredictMD.singlelabelbinaryclassificationmetrics(\n        logistic_classifier,\n        testing_features_df,\n        testing_labels_df,\n        single_label_name,\n        positive_class;\n        sensitivity = 0.95,\n        );\n    allrows = true,\n    allcols = true,\n    splitcols = false,\n    )\n\nlogistic_calibration_curve =\n    PredictMD.plot_probability_calibration_curve(\n        logistic_classifier,\n        smoted_training_features_df,\n        smoted_training_labels_df,\n        single_label_name,\n        positive_class;\n        window = 0.2,\n        );\n\n\n\ndisplay(logistic_calibration_curve)\nPredictMD.save_plot(\n    joinpath(\n        PROJECT_OUTPUT_DIRECTORY,\n        \"plots\",\n        \"logistic_calibration_curve.pdf\",\n        ),\n    logistic_calibration_curve,\n    )\n\nshow(\n    PredictMD.probability_calibration_metrics(\n        logistic_classifier,\n        testing_features_df,\n        testing_labels_df,\n        single_label_name,\n        positive_class;\n        window = 0.1,\n        );\n    allrows = true,\n    allcols = true,\n    splitcols = false,\n    )\n\nlogistic_cutoffs, logistic_risk_group_prevalences =\n    PredictMD.risk_score_cutoff_values(\n        logistic_classifier,\n        testing_features_df,\n        testing_labels_df,\n        single_label_name,\n        positive_class;\n        average_function = Statistics.mean,\n        )\n@info(\n    string(\n        \"Low risk: 0 to $(logistic_cutoffs[1]).\",\n        \" Medium risk: $(logistic_cutoffs[1]) to $(logistic_cutoffs[2]).\",\n        \" High risk: $(logistic_cutoffs[2]) to 1.\",\n        )\n    )\n@info(logistic_risk_group_prevalences)\n\nlogistic_cutoffs, logistic_risk_group_prevalences =\n    PredictMD.risk_score_cutoff_values(\n        logistic_classifier,\n        testing_features_df,\n        testing_labels_df,\n        single_label_name,\n        positive_class;\n        average_function = Statistics.median,\n        )\n@info(\n    string(\n        \"Low risk: 0 to $(logistic_cutoffs[1]).\",\n        \" Medium risk: $(logistic_cutoffs[1]) to $(logistic_cutoffs[2]).\",\n        \" High risk: $(logistic_cutoffs[2]) to 1.\",\n        )\n    )\n@info(logistic_risk_group_prevalences)\n\nlogistic_classifier_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"models\",\n    \"logistic_classifier.jld2\",\n    )\n\nPredictMD.save_model(logistic_classifier_filename, logistic_classifier)\n\n\n\n### End logistic classifier code\n\n\n\n# This file was generated by PredictMD version 0.34.21\n# For help, please visit https://predictmd.net","category":"page"},{"location":"examples/cpu_examples/breast_cancer_biopsy/src/03_logistic_classifier/#","page":"3.  Logistic classifier","title":"3.  Logistic classifier","text":"","category":"page"},{"location":"examples/cpu_examples/breast_cancer_biopsy/src/03_logistic_classifier/#","page":"3.  Logistic classifier","title":"3.  Logistic classifier","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generate_examples/generate_examples/#Generating-example-files-locally-1","page":"Generating these example files on your computer","title":"Generating example files locally","text":"","category":"section"},{"location":"generate_examples/generate_examples/#","page":"Generating these example files on your computer","title":"Generating these example files on your computer","text":"You can generate the example files using the generate_examples function. Instructions for using the generate_examples are given below.","category":"page"},{"location":"generate_examples/generate_examples/#","page":"Generating these example files on your computer","title":"Generating these example files on your computer","text":"In the following code snippets, output_directory is the directory where you want to save the generated example files. output_directory should NOT be an existing directory. If output_directory already exists, you should delete it before running the generate_examples function.","category":"page"},{"location":"generate_examples/generate_examples/#Generating-scripts-(.jl-files)-1","page":"Generating these example files on your computer","title":"Generating scripts (.jl files)","text":"","category":"section"},{"location":"generate_examples/generate_examples/#","page":"Generating these example files on your computer","title":"Generating these example files on your computer","text":"To generate the examples as Julia scripts (.jl files), use the following code.","category":"page"},{"location":"generate_examples/generate_examples/#","page":"Generating these example files on your computer","title":"Generating these example files on your computer","text":"PredictMD.generate_examples(output_directory; scripts = true)","category":"page"},{"location":"generate_examples/generate_examples/#Generating-IJulia/Jupyter-notebooks-(.ipynb-files)-1","page":"Generating these example files on your computer","title":"Generating IJulia/Jupyter notebooks (.ipynb files)","text":"","category":"section"},{"location":"generate_examples/generate_examples/#","page":"Generating these example files on your computer","title":"Generating these example files on your computer","text":"To generate the examples as IJulia/Jupyter notebooks (.ipynb files), use the following code. output_directory is the directory where you want to save the generated example files. output_directory should NOT be an existing directory. If output_directory already exists, you should delete it before running the generate_examples function.","category":"page"},{"location":"generate_examples/generate_examples/#","page":"Generating these example files on your computer","title":"Generating these example files on your computer","text":"PredictMD.generate_examples(output_directory; notebooks = true)","category":"page"},{"location":"examples/cpu_examples/breast_cancer_biopsy/src/01_preprocess_data/#","page":"1.  Preprocess data","title":"1.  Preprocess data","text":"EditURL = \"https://github.com/bcbi/PredictMD.jl/blob/master/templates/examples/cpu_examples/breast_cancer_biopsy/src/01_preprocess_data.jl\"","category":"page"},{"location":"examples/cpu_examples/breast_cancer_biopsy/src/01_preprocess_data/#","page":"1.  Preprocess data","title":"1.  Preprocess data","text":"# This file was generated by PredictMD version 0.34.21\n# For help, please visit https://predictmd.net\n\nusing PredictMDExtra\nPredictMDExtra.import_all()\n\nusing PredictMD\nPredictMD.import_all()\n\n\n\n### Begin project-specific settings\n\nDIRECTORY_CONTAINING_THIS_FILE = @__DIR__\nPROJECT_DIRECTORY = dirname(\n    joinpath(splitpath(DIRECTORY_CONTAINING_THIS_FILE)...)\n    )\nPROJECT_OUTPUT_DIRECTORY = joinpath(\n    PROJECT_DIRECTORY,\n    \"output\",\n    )\nmkpath(PROJECT_OUTPUT_DIRECTORY)\nmkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, \"data\"))\nmkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, \"models\"))\nmkpath(joinpath(PROJECT_OUTPUT_DIRECTORY, \"plots\"))\n\n\n\n### End project-specific settings\n\n### Begin data preprocessing code\n\nRandom.seed!(999)\n\ndf = RDatasets.dataset(\"MASS\", \"biopsy\")\n\n# PredictMD requires that you provide your data in a DataFrame.\n\n# If your data are in a CSV file (e.g. \"data.csv\"), load them into\n# a DataFrame named `df` with:\n# df = DataFrames.DataFrame(CSVFiles.load(\"data.csv\"; type_detect_rows = 10_000))\n\n# If your data are in a gzipped CSV file (e.g. \"data.csv.gz\"), load them into\n# a DataFrame named `df` with:\n# df = DataFrames.DataFrame(CSVFiles.load(CSVFiles.File(CSVFiles.format\"CSV\", \"data.csv.gz\"); type_detect_rows = 10_000))\n\n# If your data are in some other format, use the appropriate Julia package to\n# load your data into a DataFrame named `df`.\n\n\n\ncategorical_feature_names = Symbol[]\ncontinuous_feature_names = Symbol[\n    :V1,\n    :V2,\n    :V3,\n    :V4,\n    :V5,\n    :V6,\n    :V7,\n    :V8,\n    :V9,\n    ]\ncategorical_feature_names_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"categorical_feature_names.jld2\",\n    )\ncontinuous_feature_names_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"continuous_feature_names.jld2\",\n    )\nFileIO.save(\n    categorical_feature_names_filename,\n    \"categorical_feature_names\",\n    categorical_feature_names,\n    )\nFileIO.save(\n    continuous_feature_names_filename,\n    \"continuous_feature_names\",\n    continuous_feature_names,\n    )\nfeature_names = vcat(categorical_feature_names, continuous_feature_names)\n\nsingle_label_name = :Class\nnegative_class = \"benign\"\npositive_class = \"malignant\"\nsingle_label_levels = [negative_class, positive_class]\n\ncategorical_label_names = Symbol[single_label_name]\ncontinuous_label_names = Symbol[]\nlabel_names = vcat(categorical_label_names, continuous_label_names)\n\ndf = df[:, vcat(feature_names, label_names)]\nDataFrames.dropmissing!(df; disallowmissing=true,)\nPredictMD.shuffle_rows!(df)\n\nPredictMD.fix_column_types!(\n    df;\n    categorical_feature_names = categorical_feature_names,\n    continuous_feature_names = continuous_feature_names,\n    categorical_label_names = categorical_label_names,\n    continuous_label_names = continuous_label_names,\n    )\nPredictMD.check_column_types(\n    df;\n    categorical_feature_names = categorical_feature_names,\n    continuous_feature_names = continuous_feature_names,\n    categorical_label_names = categorical_label_names,\n    continuous_label_names = continuous_label_names,\n    )\n\n\n\nfeatures_df = df[feature_names]\nlabels_df = df[label_names]\n\n(trainingandtuning_features_df,\n    trainingandtuning_labels_df,\n    testing_features_df,\n    testing_labels_df,) = PredictMD.split_data(\n        features_df,\n        labels_df,\n        0.75,\n        )\n(training_features_df,\n    training_labels_df,\n    tuning_features_df,\n    tuning_labels_df,) = PredictMD.split_data(\n        trainingandtuning_features_df,\n        trainingandtuning_labels_df,\n        2/3,\n        )\n\ntrainingandtuning_features_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"trainingandtuning_features_df.csv\",\n    )\ntrainingandtuning_labels_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"trainingandtuning_labels_df.csv\",\n    )\ntesting_features_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"testing_features_df.csv\",\n    )\ntesting_labels_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"testing_labels_df.csv\",\n    )\ntraining_features_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"training_features_df.csv\",\n    )\ntraining_labels_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"training_labels_df.csv\",\n    )\ntuning_features_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"tuning_features_df.csv\",\n    )\ntuning_labels_df_filename = joinpath(\n    PROJECT_OUTPUT_DIRECTORY,\n    \"data\",\n    \"tuning_labels_df.csv\",\n    )\nFileIO.save(trainingandtuning_features_df_filename, trainingandtuning_features_df)\nFileIO.save(trainingandtuning_labels_df_filename, trainingandtuning_labels_df)\nFileIO.save(testing_features_df_filename, testing_features_df)\nFileIO.save(testing_labels_df_filename, testing_labels_df)\nFileIO.save(training_features_df_filename, training_features_df)\nFileIO.save(training_labels_df_filename, training_labels_df)\nFileIO.save(tuning_features_df_filename, tuning_features_df)\nFileIO.save(tuning_labels_df_filename, tuning_labels_df)\n\n### End data preprocessing code\n\n\n\n# This file was generated by PredictMD version 0.34.21\n# For help, please visit https://predictmd.net","category":"page"},{"location":"examples/cpu_examples/breast_cancer_biopsy/src/01_preprocess_data/#","page":"1.  Preprocess data","title":"1.  Preprocess data","text":"","category":"page"},{"location":"examples/cpu_examples/breast_cancer_biopsy/src/01_preprocess_data/#","page":"1.  Preprocess data","title":"1.  Preprocess data","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#PredictMD-1","page":"Home","title":"PredictMD","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"PredictMD is a free and open-source Julia package that provides a uniform interface for machine learning.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"PredictMD makes it easy to automate machine learning workflows and create reproducible machine learning pipelines.","category":"page"},{"location":"#Installation-1","page":"Home","title":"Installation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"PredictMD is registered in the Julia General registry. Therefore, to install PredictMD, simply open Julia and run the following four lines:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"import Pkg\nPkg.activate(\"PredictMDEnvironment\"; shared = true)\nPkg.add(\"PredictMDFull\")\nimport PredictMDFull","category":"page"},{"location":"#Running-the-package-tests-1","page":"Home","title":"Running the package tests","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"You can run the default PredictMD test suite by running the following five lines in Julia:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"import Pkg\nPkg.activate(\"PredictMDEnvironment\"; shared = true)\nPkg.test(\"PredictMDExtra\")\nPkg.test(\"PredictMDFull\")\nPkg.test(\"PredictMD\")","category":"page"},{"location":"#","page":"Home","title":"Home","text":"To run the full test suite, which includes tests of the plotting functionality, run the following six lines in Julia:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"import Pkg\nPkg.activate(\"PredictMDEnvironment\"; shared = true)\nENV[\"PREDICTMD_TEST_GROUP\"] = \"all\"\nPkg.test(\"PredictMDExtra\")\nPkg.test(\"PredictMDFull\")\nPkg.test(\"PredictMD\")","category":"page"},{"location":"examples/cpu_examples/breast_cancer_biopsy/README/#Breast-cancer-biopsy-classification-1","page":"Breast cancer biopsy classification","title":"Breast cancer biopsy classification","text":"","category":"section"}]
}
